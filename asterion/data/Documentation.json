[{"ord":"0","idDocumentation":"1","title":"Installing Asterion","titleUrl":"installing-asterion","idDocumentationCategory":"1","shortDescription":"This are the instructions to install a new Asterion project.","description":"<h2>What do you need to run Asterion?<\/h2>\r\n\r\n<p>In order to use Asterion you need a machine that :<\/p>\r\n\r\n<ul>\r\n\t<li>Runs <strong>PHP<\/strong> (version 5.3 with the PDO-MySQL extension).<\/li>\r\n\t<li>Has one <strong>MySQL database<\/strong>.<\/li>\r\n<\/ul>\r\n\r\n<h3>In Windows or Mac<\/h3>\r\n\r\n<p>You can use <a href=\"http:\/\/www.mamp.info\" target=\"_blank\">MAMP<\/a> or <a href=\"http:\/\/www.easyphp.org\" target=\"_blank\">EasyPhp<\/a> to run the framework. Both are <strong>PHP<\/strong> emulators and they usually come with a <strong>phpMyAdmin<\/strong> service to manage <strong>MySQL<\/strong> databases.<\/p>\r\n\r\n<p>You can also use an external tool like <a href=\"https:\/\/codeanywhere.com\/\" target=\"_blank\">CodeAnyWhere<\/a>.<\/p>\r\n\r\n<h3>In Linux<\/h3>\r\n\r\n<p>You should install the <strong>LAMP<\/strong> environment in you computer. For instructions check this <a href=\"https:\/\/www.digitalocean.com\/community\/tutorials\/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu\" target=\"_blank\">post<\/a>.<\/p>\r\n\r\n<h2>Creating a new project<\/h2>\r\n\r\n<p>To install a new project from scratch, follow these steps:<\/p>\r\n\r\n<h3>1. Download the Asterion files and put them in your web server.<\/h3>\r\n\r\n<p>You should put all the Asterion files on your local folder or webserver in a file like:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">\/path_to_my_server_folder\/public_html\/\r\n\/path_to_my_server_folder\/www\/\r\n\/path_to_my_server_folder\/htdocs\/<\/code><\/pre>\r\n\r\n<p>You will then have two addresses. The local one that will be accessible through a file manager:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">\/path_to_my_server_folder\/public_html\/my_asterion_website\/<\/code><\/pre>\r\n\r\n<p>And the public one that will be accessible using a web browser:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">http:\/\/localhost\/my_asterion_website\/<\/code><\/pre>\r\n\r\n<h3>2. Create a MySQL database in your server or your emulator.<\/h3>\r\n\r\n<p>We do not offer an installation script, so you&#39;ll have to create the empty database via <strong>phpMyAdmin<\/strong> or the console&#39;s <strong>MySQL<\/strong> command. In this case we need the following information:<\/p>\r\n\r\n<ul>\r\n\t<li>The <em>name<\/em> of the database.<\/li>\r\n\t<li>The <em>username<\/em> to connect to the database.<\/li>\r\n\t<li>The <em>password<\/em> to connect to the database.<\/li>\r\n\t<li>The <em>prefix<\/em> of the tables, in case that you will use the same database for multiple websites.<\/li>\r\n\t<li>Eventually, the <em>port<\/em> to connect to the database, by default is 3306.<\/li>\r\n<\/ul>\r\n\r\n<h3>3. Configure Asterion.<\/h3>\r\n\r\n<p>To configure the framework, you should open the configure file located in:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">path_to_my_site\/base\/config\/config.php<\/code><\/pre>\r\n\r\n<p>And edit the following lines:<\/p>\r\n\r\n<p>The <em>TITLE<\/em> constant defines the title of your page, it will be always editable in the future.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">define('TITLE', 'Base Site');<\/code><\/pre>\r\n\r\n<p>The <em>SERVER_URL<\/em> constant must point to the public base access. If you are developing it should be <em>http:\/\/localhost<\/em>, <em>http:\/\/128.0.0.1<\/em> or <em>http:\/\/localhost:8888<\/em> depending on your server&#39;s configuration.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">define('SERVER_URL', 'http:\/\/localhost');<\/code><\/pre>\r\n\r\n<p>The <em>BASE_STRING<\/em> is the name of folder where you downloaded your website.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">define('BASE_STRING','\/asterion\/');<\/code><\/pre>\r\n\r\n<p>The idea behind the <em>SERVER_URL<\/em> and the <em>BASE_STRING<\/em> constants is that they help to build the most important <em>LOCAL_URL<\/em> and <em>LOCAL_FILE<\/em> constants. The <em>LOCAL_URL<\/em> constant must point to the public website and <em>LOCAL_FILE<\/em> constant must point to the server&rsquo;s file system, as described in the first step of the installation.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">define('LOCAL_URL', SERVER_URL.BASE_STRING);\r\ndefine('LOCAL_FILE', $_SERVER['DOCUMENT_ROOT'].BASE_STRING);<\/code><\/pre>\r\n\r\n<p>The <em>DEBUG<\/em> constant must be true if you are developing the website. It must be false when you are ready to publish it in your web server.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">define('DEBUG', true);<\/code><\/pre>\r\n\r\n<p>We have translated our framework in English, Spanish and French but it can be easily translated to other languages. You can change the value depending on the languages that you need for your website. For example, if it will be just in English just put <em>en<\/em>, if you want it in French and Spanish put <em>fr:es<\/em>.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">define('LANGS', 'en:es:fr');<\/code><\/pre>\r\n\r\n<p>The <em>DB_<\/em> constants are used to configure the <strong>MySQL<\/strong> database. <strong>Asterion<\/strong> needs to know the <em>server<\/em>, <em>user<\/em>, <em>password<\/em> and <em>port<\/em> to connect to the database. It also needs the database name and eventually a <em>prefix<\/em> for the tables.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">define('DB_SERVER', 'localhost');\r\ndefine('DB_NAME', '');\r\ndefine('DB_USER', '');\r\ndefine('DB_PASSWORD', '');\r\ndefine('DB_PORT', '3306');\r\ndefine('DB_PREFIX', 'ast_');\r\n<\/code><\/pre>\r\n\r\n<p>The <em>EMAIL<\/em> constant is the main email address, <strong>Asterion<\/strong> will use it to create the first user and to manage the general communications.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">define('EMAIL', 'info@asterion.org');<\/code><\/pre>\r\n\r\n<h3>4. Test your installation.<\/h3>\r\n\r\n<p>You should go to your browser and test the landing page that should be on:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">http:\/\/localhost\/asterion<\/code><\/pre>\r\n\r\n<p>Usually you should see a simple page.<\/p>\r\n\r\n<p style=\"text-align: center;\"><img alt=\"\" src=\"\/asterion\/asterion\/stock\/uploaded\/images\/asterion_base.png\" style=\"max-width: 100%;\" \/><br \/>\r\n<span><strong>Figure:<\/strong> Basic template page of a new installation<\/span><\/p>\r\n\r\n<p><br \/>\r\nYou also have the BackEnd administration system by default on:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">http:\/\/localhost\/asterion\/admin<\/code><\/pre>\r\n\r\n<p style=\"text-align: center;\"><img alt=\"\" src=\"\/asterion\/asterion\/stock\/uploaded\/images\/asterion_login.png\" style=\"max-width: 100%;\" \/><br \/>\r\n<span><strong>Figure:<\/strong> Login to the BackEnd administration system<\/span><\/p>\r\n\r\n<p>To connect you have to use the <em>email<\/em> defined in the configuration file. The initial password is <em>asterion<\/em>. For security reasons you should change it on your first connection.<\/p>\r\n"},{"ord":"1","idDocumentation":"2","title":"Publishing an Asterion website","titleUrl":"publishing-an-asterion-website","idDocumentationCategory":"1","shortDescription":"Steps to install an Asterion website into a production environment.","description":"<p><strong>Asterion<\/strong> is very flexible when dealing with migration to a new server or to another location. It doesn&#39;t encode any information in the database except for the passwords and it uses a simple data structure.<\/p>\r\n\r\n<h2>Steps to publish a website<\/h2>\r\n\r\n<p>To publish or to migrate an <strong>Asterion<\/strong> website you have to follow these steps:<\/p>\r\n\r\n<h3>1. Migrate the files manually<\/h3>\r\n\r\n<p>First of all, you should save a copy of all the files. Then, you should either upload them to the production server or to the new folder where you want your site to work.<\/p>\r\n\r\n<h3>2. Migrate the database manually<\/h3>\r\n\r\n<p>Given the fact that <strong>Asterion<\/strong> does not provide an installation script, you should dump the actual database and create a new one on your server to import the data. If you are just moving the location of the files you do not need this step since the connection to the database remains the same.<\/p>\r\n\r\n<h3>3. Re-configure your site.<\/h3>\r\n\r\n<p>Since you migrated the site, there are some lines in the configuration file to update. Firstly, you should open the configuration file in:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">path_to_the_new_location_of_my_site\/base\/config\/config.php<\/code><\/pre>\r\n\r\n<p>And edit the following lines:<\/p>\r\n\r\n<p>The <em>SERVER_URL<\/em> constant must change to the new public access. If you are migrating to a production server you should put the correct URL here that should be something like <em>http:\/\/www.my-website.com<\/em>.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">define('SERVER_URL', 'http:\/\/www.my-website.com');<\/code><\/pre>\r\n\r\n<p>The <em>BASE_STRING<\/em> must also change to the new location. If you are in production mode you should just put a slash <em>\/<\/em> because usually you just have one website in each domain.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">define('BASE_STRING','\/');<\/code><\/pre>\r\n\r\n<p>Now that we are in a production mode, keep the <em>DEBUG<\/em> to false to make it cleaner for the users.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">define('DEBUG', false);<\/code><\/pre>\r\n\r\n<p>You should also change the <em>DB_<\/em> constants to have access to the new <strong>MySQL<\/strong> database.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">define('DB_SERVER', 'localhost');\r\ndefine('DB_NAME', '');\r\ndefine('DB_USER', '');\r\ndefine('DB_PASSWORD', '');\r\ndefine('DB_PORT', '3306');\r\ndefine('DB_PREFIX', 'ast_');<\/code><\/pre>\r\n\r\n<h3>4. Test your website<\/h3>\r\n\r\n<p>Now, you should go to your browser and test your landing page that should be on:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">http:\/\/www.my-website.com<\/code><\/pre>\r\n\r\n<p>Usually you should see a correct copy of your website. You also have access to the <strong>BackEnd<\/strong> administration system by default:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">http:\/\/www.my-website.com\/admin<\/code><\/pre>\r\n"},{"ord":"2","idDocumentation":"3","title":"Installation troubleshoot","titleUrl":"installation-troubleshoot","idDocumentationCategory":"1","shortDescription":"Steps to follow when you have problems installing Asterion.","description":"<p>If you don&#39;t see the simple page or you get an error message when testing your website, you can check the common errors in this section. First of all, check for the obvious, which means that your server is running. Also check that that you can see the errors configuring your <strong>Apache<\/strong> web server or emulator.<\/p>\r\n\r\n<h2>Solution to errors of the database connection<\/h2>\r\n\r\n<p>One of the most common errors is that the website cannot connect to the database.<\/p>\r\n\r\n<p style=\"text-align: center;\"><img alt=\"\" src=\"\/asterion\/asterion\/stock\/uploaded\/images\/error_db.png\" style=\"max-width: 100%;\" \/><br \/>\r\n<strong>Figure<\/strong>: Error on the connection with the database<\/p>\r\n\r\n<p>In order to solve this problem, first you should check if your database is running. You should have general access through a manager like <strong>PHPMyAdmin<\/strong> or <strong>SQLManager<\/strong>.<\/p>\r\n\r\n<p>Then, you should check if your database has access from the public address like:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">http:\/\/localhost\/asterion<\/code><\/pre>\r\n\r\n<p>Some databases have blocked access from certain URLs or they need a special port. Finally, check if the following variables in the config file are correct:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">define('DB_SERVER', 'localhost');\r\ndefine('DB_NAME', '');\r\ndefine('DB_USER', '');\r\ndefine('DB_PASSWORD', '');\r\ndefine('DB_PORT', '3306');<\/code><\/pre>\r\n\r\n<h2>Solution to errors of your file system<\/h2>\r\n\r\n<p>As stated in the first installation step, the most important thing to configure are the two constants that point to your website:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">define('LOCAL_URL', SERVER_URL.BASE_STRING);\r\ndefine('LOCAL_FILE', $_SERVER['DOCUMENT_ROOT'].BASE_STRING);<\/code><\/pre>\r\n\r\n<p style=\"text-align: center;\"><img alt=\"\" src=\"\/asterion\/asterion\/stock\/uploaded\/images\/error_filesystem.png\" style=\"max-width: 100%;\" \/><br \/>\r\n<strong>Figure<\/strong>: Example of an error with the file system<\/p>\r\n\r\n<p>Both must point to the public and local work directory. If you get some errors you can force the configuration of these variables like:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">define('LOCAL_URL', 'http:\/\/localhost\/asterion\/');\r\ndefine('LOCAL_FILE', '\/home\/path_to_my_website\/public_htm\/asterion\/');<\/code><\/pre>\r\n\r\n<p>A common error is to forget the slash <em>\/<\/em> at the end of both paths.<\/p>\r\n\r\n<h2>You don&#39;t see anything or you get an HTTP 500 error<\/h2>\r\n\r\n<p>If you get a complete white page or you get the <em>HTTP 500 Internal server error<\/em>, it means that there is something wrong with the configuration of your server. Usually this kind of errors comes from the server configuration and not from <strong>Asterion<\/strong>.<\/p>\r\n\r\n<p>To solve them, first check if your server works correctly. You can create another website with just a simple <em>index.php<\/em> file on it and see if the server is working. If the problem concerns only the <strong>Asterion<\/strong> websites, you can try to:<\/p>\r\n\r\n<ul>\r\n\t<li>Check if the permissions on the <em>index.php<\/em> and the <em>.htaccess<\/em> files are <em>644<\/em>. Both are the most sensitive files to run the website, some servers tend to be very strict with security measure of those two files.<\/li>\r\n\t<li>Check if your server accepts <em>.htaccess<\/em> files. If it doesn&#39;t, configure it to accept this file because <strong>Asterion<\/strong> needs it to do the URL redirections.<\/li>\r\n\t<li>Check if you have the permissions on your server to do URL redirections in your <em>.htaccess<\/em> file. The most important lines in that file are:\r\n\t<pre>\r\n<code class=\"language-apache\">&lt;IfModule mod_rewrite.c&gt;\r\n    RewriteEngine On\r\n    RewriteCond %{REQUEST_FILENAME} !-d\r\n    RewriteCond %{REQUEST_FILENAME} !-f\r\n    RewriteRule ^(.*)$ index.php?url=$1 [QSA,L]\r\n&lt;\/IfModule&gt;<\/code><\/pre>\r\n\t<\/li>\r\n\t<li>Those mean that any URL on your website will be treated by the <em>index.php<\/em> file, so it is of main importance that your server or emulator can run <em>.htaccess<\/em> files.<\/li>\r\n<\/ul>\r\n"},{"ord":"3","idDocumentation":"4","title":"Files in the Asterion package","titleUrl":"files-in-the-asterion-package","idDocumentationCategory":"2","shortDescription":"Description of the file structure used by Asterion","description":"<p>Basically <strong>Asterion<\/strong> is composed of the following files and folders:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>index.php<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the main file that loads the different objects and renders the content of the request.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>.htaccess<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the configuration file for the server that manages the URL redirections.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>app\/<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the folder where <strong>Asterion<\/strong> stores all the core files. Usually you should not modify any of these files.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>app\/data\/<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the folder where we store the raw information needed to load <strong>Asterion<\/strong>.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>app\/helpers\/<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the folder that stores the external libraries used by the different components. It also has the autoload.phpfile that loads a class in PHP as soon as it is called.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>app\/lib\/<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the folder that stores the different objects in the core of Asterion. It is divided in the <strong>base objects<\/strong> that are used everywhere and the <strong>admin objects<\/strong> that are created mainly for the <strong>BackEnd<\/strong>.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>app\/libjs\/<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the folder that contains all the <strong>JavaScript<\/strong> files including the external libraries such as <strong>jQuery<\/strong>.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>app\/visual\/<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the folder that has all of the files for the template of the <strong>BackEnd<\/strong>. Here we store the <strong>CSS<\/strong> files, the images and the <strong>HTML<\/strong> template files.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>base\/<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the folder for the public website. Here we have the public templates and the objects that are used for the specific website.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>base\/config\/<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the folder that contains the configuration file. You can use the folder to save backup copies of it.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>base\/lib\/<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the folder that contains all the public objects. The only one that is mandatory is the <strong>Navigation one.<\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>base\/libjs\/<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the folder that contains all the scripts that will be available in the public website.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>base\/stock\/<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the folder that contains the stock of images and files saved by the public objects. For example if the object <strong>Post<\/strong> has images on it, they will be saved in this folder. You should change the permissions of this one to let <strong>Asterion<\/strong> save files on it.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>base\/visual\/<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It has all of the files for the template for the <strong>FrontEnd<\/strong>. Here we store the <strong>CSS<\/strong> files, the images and the <strong>HTML<\/strong> template files.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>Usually we would just work on the base directory. First configuring it, then creating and manipulating the objects in the <em>\/base\/lib\/<\/em> folder and finally styling the website using the files on the <em>\/base\/visual\/<\/em> folder.<\/p>\r\n"},{"ord":"4","idDocumentation":"5","title":"Handling requests","titleUrl":"handling-requests","idDocumentationCategory":"2","shortDescription":"How Asterion handles requests made to the server","description":"<p>A website can be as simple as having some static pages or as complex as an ecommerce site. <strong>Asterion<\/strong> treats every single site request to the website in the same way. When someone sends a request to your website using a browser, the <em>.htaccess<\/em> sends it to the <em>index.php<\/em> file to process. So links like:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">http:\/\/www.mysite.com\/\r\nhttp:\/\/www.mysite.com\/about-us\r\nhttp:\/\/www.mysite.com\/products\r\nhttp:\/\/www.mysite.com\/products\/boat\r\nhttp:\/\/www.mysite.com\/products\/boat\/rent<\/code><\/pre>\r\n\r\n<p>They will be treated in the same <em>index.php<\/em> file. Basically, this file follows these steps:<\/p>\r\n\r\n<h3>1. Loading process<\/h3>\r\n\r\n<p>First, this file loads the configuration file and starts the session and database using the following lines:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">define('APP_FOLDER', 'asterion');\r\nrequire_once(APP_FOLDER.'\/config\/config.php');<\/code><\/pre>\r\n\r\n<p>First, we define the folder inside <strong>Asterion<\/strong> that has the application. This is just in case you want to have copies of your site, for example you could have <em>asterion_test<\/em>, <em>asterion_developers<\/em> or <em>asterion_designers<\/em>. And then, it loads the configuration file.<\/p>\r\n\r\n<h3>2. Reading the request<\/h3>\r\n\r\n<p>Next, the <em>index.php<\/em> file reads the URL using the following line:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">Url::init();<\/code><\/pre>\r\n\r\n<p>That function will parse the URL and create the following variables in the <em>$_GET<\/em> global array:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">http:\/\/www.mysite.com\/$language\/$action\/$id\/$extraId<\/code><\/pre>\r\n\r\n<p>We will use the <em>$language<\/em>, <em>$action<\/em>, <em>$id<\/em> and <em>$extraId<\/em> variables to render the proper content.<\/p>\r\n\r\n<h3>3. Initialization process<\/h3>\r\n\r\n<p>The next step is to load the languages and the main parameters of the website. To do so, the index.php file uses the following lines:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">Lang::init();\r\nParams::init();<\/code><\/pre>\r\n\r\n<p>Both of these functions load in memory all the translations and the general parameters to run the website.<\/p>\r\n\r\n<h3>4. Creating the content<\/h3>\r\n\r\n<p>Then, the index.php file loads the Controller object using a factory and generates the content of the page. By default the controller object is the Navigation one.<\/p>\r\n\r\n<p>As you can see in following lines, the <em>index.php<\/em> file gathers all the information from the controller to render the page:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$control = Controller_Factory::factory($_GET, $_POST, $_FILES);\r\n$content = $control-&gt;controlActions();\r\n$title = $control-&gt;getTitle();\r\n$header = $control-&gt;getHeader();\r\n$metaKeywords = $control-&gt;getMetaKeywords();\r\n$metaDescription = $control-&gt;getMetaDescription();\r\n$metaImage = $control-&gt;getMetaImage();\r\n$mode = $control-&gt;getMode();<\/code><\/pre>\r\n\r\n<p>The main content is retrieved from the <em>controlActions<\/em> function. Other information like the title of the page or some meta information can be retrieved with other functions like <em>getTitle<\/em>, <em>getHeader<\/em>, <em>getMetaKeywords<\/em> or <em>getMetaDescription<\/em>.<\/p>\r\n\r\n<h3>5. Rendering the page<\/h3>\r\n\r\n<p>Finally, once this file hast the content from the controller, <strong>Asterion<\/strong> renders the site depending on the <em>$mode<\/em> of the controller. To do so, it uses the following lines:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$mode = isset($mode) ? $mode : 'public';\r\nswitch ($mode) {\r\n\u00a0\u00a0\u00a0 default:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 $file = BASE_FILE.'visual\/templates\/'.$mode.'.php';\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (file_exists($file)) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 include($file);\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\r\n\u00a0\u00a0\u00a0 break;\r\n\u00a0\u00a0\u00a0 case 'admin':\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 include APP_FILE.'visual\/templates\/admin.php';\r\n\u00a0\u00a0\u00a0 break;\r\n\u00a0\u00a0\u00a0 case 'ajax':\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 echo $content;\r\n\u00a0\u00a0\u00a0 break;\r\n\u00a0\u00a0\u00a0 case 'json':\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 header('Content-Type: application\/json');\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 echo $content;\r\n\u00a0\u00a0\u00a0 break;\r\n}<\/code><\/pre>\r\n\r\n<p>As you can see, by default it uses the <em>public.php<\/em> file in the templates folder. But, in some cases we may need to render the content directly like in an <strong>ajax request<\/strong>. In other cases we would even need to change the headers of the response like in the case of a <strong>json request<\/strong>.<\/p>\r\n"},{"ord":"5","idDocumentation":"6","title":"The basic HTML template","titleUrl":"the-basic-html-template","idDocumentationCategory":"3","shortDescription":"Document that explains how to use a simple and basic template.","description":"<p>You will be amazed by the amounts of templates that you can buy of stylize in other CMS, so maybe you will feel a little disappointed to know that <strong>Asterion<\/strong> has no template engine. It may sound like a down point but we actually prefer it because we have the complete freedom to create anything from scratch.<\/p>\r\n\r\n<p><strong>Asterion<\/strong> tries to keep the resources as simple as possible. That is why it tries to use only one basic template.<\/p>\r\n\r\n<ul>\r\n\t<li>Template file for the <strong>FrontEnd<\/strong>.<br \/>\r\n\t<em>\/base\/visual\/templates\/public.php<\/em><\/li>\r\n\t<li>Template file for the <strong>BackEnd<\/strong>.<br \/>\r\n\t<em>\/app\/visual\/templates\/admin.php<\/em><\/li>\r\n<\/ul>\r\n\r\n<p>The default template for the <strong>FronEnd<\/strong> is a very simple <strong>HTML5<\/strong> page:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-markup language-html\">&lt;!DOCTYPE html&gt;\r\n&lt;html lang=\"&lt;?php echo Lang::active();?&gt;\"&gt;\r\n&lt;head&gt;\r\n\u00a0\u00a0\u00a0 &lt;meta charset=\"utf-8\"&gt;\r\n\u00a0\u00a0\u00a0 &lt;meta name=\"description\" content=\"&lt;?php echo $metaDescription;?&gt;\"\/&gt;\r\n\u00a0\u00a0\u00a0 &lt;meta name=\"keywords\" content=\"&lt;?php echo $metaKeywords;?&gt;\"\/&gt;\r\n\u00a0\u00a0\u00a0 &lt;meta name=\"viewport\" content=\"width=device-width, minimum-scale=1.0, maximum-scale=1.0\" \/&gt;\r\n\u00a0\u00a0\u00a0 &lt;meta property=\"og:title\" content=\"&lt;?php echo $title;?&gt;\" \/&gt;\r\n\u00a0\u00a0\u00a0 &lt;meta property=\"og:description\" content=\"&lt;?php echo $metaDescription;?&gt;\" \/&gt;\u00a0\u00a0 \u00a0\r\n\u00a0\u00a0\u00a0 &lt;meta property=\"og:image\" content=\"&lt;?php echo $metaImage;?&gt;\" \/&gt;\r\n\u00a0\u00a0\u00a0 &lt;?php echo Params::param('googleWebmasters');?&gt;\r\n\u00a0\u00a0\u00a0 &lt;link rel=\"shortcut icon\" href=\"&lt;?php echo BASE_URL;?&gt;visual\/img\/favicon.ico\"\/&gt;\r\n\u00a0\u00a0\u00a0 &lt;title&gt;&lt;?php echo $title;?&gt;&lt;\/title&gt;\r\n\u00a0\u00a0\u00a0 &lt;link href=\"&lt;?php echo BASE_URL;?&gt;visual\/css\/stylesheets\/public.css\" rel=\"stylesheet\" type=\"text\/css\" \/&gt;\r\n\u00a0\u00a0\u00a0 &lt;script type=\"text\/javascript\" src=\"&lt;?php echo BASE_URL; ?&gt;libjs\/public.js\"&gt;&lt;\/script&gt;\r\n\u00a0\u00a0\u00a0 &lt;?php echo Params::param('googleAnalytics');?&gt;\r\n\u00a0\u00a0\u00a0 &lt;?php echo $header;?&gt;\r\n&lt;\/head&gt;\r\n&lt;body&gt;\r\n\u00a0\u00a0\u00a0 &lt;div id=\"bodyFrame\"&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;?php echo $content;?&gt;\r\n\u00a0\u00a0\u00a0 &lt;\/div&gt;\r\n&lt;\/body&gt;\r\n&lt;\/html&gt;<\/code><\/pre>\r\n\r\n<p>As you can see this template has 3 different sources of content:<\/p>\r\n\r\n<ol>\r\n\t<li>The <strong>variables<\/strong> produced in the <em>index.php<\/em> file like <em>$header<\/em>, <em>$metaDescription<\/em>, <em>$metaImage<\/em> or <em>$content<\/em>. You will see in detail the creation of these variables in the handling requests section of this object.<\/li>\r\n\t<li>The <strong>constants<\/strong> defined in the <em>config.php<\/em> file. Usually to create the correct URLs you need to address the <em>BASE_URL<\/em> constant.<\/li>\r\n\t<li><strong>Content objects<\/strong> like the parameters that are stored directly in the database. In this case we store the tags for the <strong>Google Webmasters<\/strong> or <strong>Google Analytics<\/strong> script.<\/li>\r\n<\/ol>\r\n\r\n<p>Eventually and depending on the case you can create other templates and link them directly to the <em>index.php<\/em> file changing the <em>$mode<\/em> attribute in the <strong>Controller<\/strong> file.<\/p>\r\n"},{"ord":"6","idDocumentation":"7","title":"Styling the content with CSS","titleUrl":"styling-the-content-with-css","idDocumentationCategory":"3","shortDescription":"How we style the content using a simple CSS file in Asterion.","description":"<div class=\"itemComplete\">\r\n<div class=\"pageComplete\">\r\n<p>As you can see in the <em>public.php<\/em> template, there is only one link to a <strong>CSS<\/strong> file:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">visual\/css\/stylesheets\/public.css<\/code><\/pre>\r\n\r\n<p>It&rsquo;s been a while since we prefer to use compiled <strong>CSS<\/strong> code and by default we use the <a href=\"http:\/\/sass-lang.com\/\" target=\"_blank\">SASS language<\/a> to do so. You can compile your <strong>SASS<\/strong> files using <a href=\"http:\/\/compass-style.org\/\" target=\"_blank\">Compass<\/a> or <a href=\"http:\/\/koala-app.com\/\" target=\"_blank\">Koala<\/a>.<\/p>\r\n\r\n<p>Anyways, <strong>Asterion<\/strong> offers complete freedom so you can just work with simple <strong>CSS<\/strong> files, add external <strong>CSS<\/strong> files to the template or use your own preferred compiler language.<\/p>\r\n\r\n<ul>\r\n\t<li>The <strong>default CSS file<\/strong> location for the public template<br \/>\r\n\t<em>\/base\/visual\/css\/stylesheets\/public.css<\/em><\/li>\r\n\t<li>The <strong>default SASS file<\/strong> location for the public template<br \/>\r\n\t<em>\/base\/visual\/css\/sass\/public.css<\/em><\/li>\r\n<\/ul>\r\n\r\n<p>The distribution version comes with a simple <strong>SASS<\/strong> file that has some handy functions to reset the style of the browsers and show a basic style.<\/p>\r\n<\/div>\r\n<\/div>\r\n"},{"ord":"7","idDocumentation":"8","title":"Creating the content for the website","titleUrl":"creating-the-content-for-the-website","idDocumentationCategory":"3","shortDescription":"How to create simple content for a website in Asterion.","description":"<p>To create the <strong>HTML markup<\/strong> for the content we use the <em>Navigation_Ui.php<\/em> file which is already instantiated in the <em>Navigation_Controller.php<\/em> file. Our <em>Navigation_Ui.php<\/em> file can be seen as a set on functions that render the different sections of the pages.<\/p>\r\n\r\n<p>You can create sections for the menu, footer, header or whatever element you need on your website.<\/p>\r\n\r\n<p>You should remember that you have complete control on the <strong>HTML markup<\/strong>, so it is up to you to structure your website as it suits you the best. Let&#39;s take for example a minimal <em>Navigation_Ui.php<\/em> file:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">class Navigation_Ui extends Ui {\r\n\u00a0 public function render() {\r\n\u00a0\u00a0\u00a0 $layoutPage = (isset($this-&gt;object-&gt;layoutPage)) ? $this-&gt;object-&gt;layoutPage : '';\r\n\u00a0\u00a0\u00a0 $title = (isset($this-&gt;object-&gt;titlePage)) ? '&lt;h1&gt;'.$this-&gt;object-&gt;titlePage.'&lt;\/h1&gt;' : '';\r\n\u00a0\u00a0\u00a0 $content = (isset($this-&gt;object-&gt;content)) ? $this-&gt;object-&gt;content : '';\r\n\u00a0\u00a0\u00a0 switch ($layoutPage) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0 default:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return '&lt;div class=\"contentWrapper\"&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 '.$this-&gt;header().'\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;div class=\"content\"&gt;'.$content.'&lt;\/div&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 '.$this-&gt;footer().'\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;\/div&gt;';\r\n\u00a0\u00a0\u00a0\u00a0\u00a0 break;\r\n\u00a0\u00a0\u00a0 }\r\n\u00a0 }\r\n\u00a0 public function header() {\r\n\u00a0\u00a0\u00a0 return '&lt;div class=\"header\"&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;div class=\"headerIns\"&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;div class=\"headerLeft\"&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;div class=\"logo\"&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;a href=\"'.url('').'\"&gt;'.Params::param('titlePage').'&lt;\/a&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;\/div&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;\/div&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;div class=\"headerRight\"&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 '.$this-&gt;menu().'\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;\/div&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;div class=\"clearer\"&gt;&lt;\/div&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;\/div&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;\/div&gt;';\r\n\u00a0 }\r\n\u00a0 public function footer() {\r\n\u00a0\u00a0\u00a0 return '&lt;div class=\"footer\"&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;div class=\"footerIns\"&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 '.Page::show('footer').'\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;\/div&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;\/div&gt;';\r\n\u00a0 }\r\n\u00a0 public function menu() {\r\n\u00a0\u00a0\u00a0 return '&lt;div class=\"menu\"&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;div class=\"menuIns\"&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;a href=\"'.url('').'\"&gt;Home&lt;\/a&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;\/div&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;div class=\"menuIns\"&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;a href=\"'.url('product-category').'\"&gt;Categories&lt;\/a&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;\/div&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;div class=\"menuIns\"&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;a href=\"'.url('contact').'\"&gt;Contact&lt;\/a&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;\/div&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;div class=\"clearer\"&gt;&lt;\/div&gt;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 &lt;\/div&gt;';\r\n\u00a0 }\r\n}<\/code><\/pre>\r\n\r\n<p>You will see that the main function is called render and it is exactly what it does, it renders the content on a proper template. The other functions like header, footer or menu are used to create those blocks of <strong>HTML markup<\/strong>. You can create as much as functions as necessary or just work on the render function.<\/p>\r\n\r\n<p>Compared to other <strong>CMS<\/strong> you may see that this way of working is just based on code. The main advantage of doing so is that you have complete freedom, the disadvantage is that you must be an experienced web developer to understand this functions and create a proper markup.<\/p>\r\n\r\n<p>The <strong>Navigation_Ui<\/strong> object has an instance of the controller object. So, we have access to all of the properties that we&#39;ve created in the <strong>Navigation_Controller<\/strong> file. You can create as much properties as you need, however we would advise to use at least the following ones:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td><strong><em>titlePage<\/em><\/strong><\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the title of the page.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td><strong><em>content<\/em><\/strong><\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>The produced <strong>HTML<\/strong> content of the page.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td><strong><em>metaDescription<br \/>\r\n\t\t\tmetaKeywords<br \/>\r\n\t\t\tmetaImage<\/em><\/strong><\/td>\r\n\t\t\t<td>These are the meta-data of the website, you can add more depending on your needs<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td><strong><em>layoutPage<\/em><\/strong><\/td>\r\n\t\t\t<td>We use this variable in case that we have multiple templates in our website. Usually there are no more than 3 different templates in a website, so we can use this variable in the <strong>Navigation_Controller<\/strong> file to instantiate the proper code to render.<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>This object is completely free to modify. You can add functions that recover the data dynamically to create the menus. Or you can show different templates if a user is connected or not. The only important thing is that all of the content goes out to the <strong>Controller<\/strong> using the render function.<\/p>\r\n"},{"ord":"8","idDocumentation":"9","title":"Dealing with objects","titleUrl":"dealing-with-objects","idDocumentationCategory":"4","shortDescription":"Basics on how to deal with objects in Asterion.","description":"<p>We&#39;ve seen already how to configure <strong>Asterion<\/strong>, how it handles requests, how it deals with templates and how we should style our website. Now we can start with the real programming.<\/p>\r\n\r\n<p><strong>Asterion<\/strong> uses the <strong>Object-oriented Programming (OOP)<\/strong> approach. We conceive each element in a website as an object. For example an <strong>Author<\/strong> is an object that has a name and a description. Each <strong>Author<\/strong> has multiple <strong>Post<\/strong> objects that have a title, an image, a description and the main article.<\/p>\r\n\r\n<p>Developers can create this objects easily and place these blocks on any part of the page. There are basically two type of objects:<\/p>\r\n\r\n<ol>\r\n\t<li><strong>Functional objects.<\/strong> These are PHP classes that have mainly static functions. We need them for text treatment, listings and general actions. The most important one of this objects is the Navigation one, because it controls how your website will work.<\/li>\r\n\t<li><strong>Content objects.<\/strong> These are PHP classes that create the structure of the website. We usually create content objects according to our needs and there are no limits to do so.<\/li>\r\n<\/ol>\r\n\r\n<p>As a recall, <strong>Asterion<\/strong>&#39;s objects exist in the following folders:<\/p>\r\n\r\n<ul>\r\n\t<li>General objects to handle <strong>Asterion<\/strong>&#39;s core.<br \/>\r\n\t<em>\/app\/lib\/base\/<\/em><\/li>\r\n\t<li>Objects that handle most of the <strong>BackEnd<\/strong>&#39;s needs.<br \/>\r\n\t<em>\/app\/lib\/admin\/<\/em><\/li>\r\n\t<li><strong>Public objects<\/strong>, including the Navigation one.<br \/>\r\n\t<em>\/base\/lib\/<\/em><\/li>\r\n<\/ul>\r\n\r\n<p>Since we are using an <em>autoload<\/em>, <strong>Asterion<\/strong> will search for the objects when they are instantiated. It will search for the objects in any of those three folders, you can work in any of them but it is highly recommended to just work on the <em>\/base\/lib\/<\/em> file.<\/p>\r\n"},{"ord":"9","idDocumentation":"10","title":"Base objects","titleUrl":"base-objects","idDocumentationCategory":"4","shortDescription":"A list of all the main base objects","description":"<p>The base objects are the ones that are general for the entire framework. <strong>Asterion<\/strong> is based in the <strong>Model-View-Controller (MVC)<\/strong> pattern. We have three objects that use this philosophy in our own way:<\/p>\r\n\r\n<h2>Model object - Db<\/h2>\r\n\r\n<p>The <strong>Db object<\/strong> is the <strong>&quot;Model&quot;<\/strong> component of the <strong>MVC pattern<\/strong>. We named this object as <strong>Db<\/strong> because our framework automatically uses a database connection for its content objects. This object is composed of the following files:<\/p>\r\n\r\n<h3>Db.php<\/h3>\r\n\r\n<p>It is the object that executes all of the queries in the database. It usually returns arrays with the response of the database.<\/p>\r\n\r\n<h3>Db_Connection.php<\/h3>\r\n\r\n<p>It is the singleton object that connects to the <strong>MySQL<\/strong> database using the <strong>PDO<\/strong> extension. You can create evolutions of this file to connect to other database services.<\/p>\r\n\r\n<h3>Db_Object.php<\/h3>\r\n\r\n<p>It is the main class for all of the content objects, they all inherit the functions contained here. What it basically does is to map the information on the database into a <strong>PHP<\/strong> object. The most common functions are:<\/p>\r\n\r\n<table class=\"tableInfo tableInfo2 \">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>id<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It gets the unique <em>id<\/em> of the instance.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>get<\/em><\/strong><br \/>\r\n\t\t\t<em>($name)<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the universal getter. It gets any attribute of the instance. It can be used, for example, to get the name or description of an instance.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>set<\/em><\/strong><br \/>\r\n\t\t\t<em>($name, $value)<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the universal setter. It sets the <em>$value<\/em> to the attribute <em>$name<\/em>.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>getBasicInfo<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It gets the simple label of the instance, we use it usually for the <strong>FrontEnd<\/strong>.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>getBasicInfoAdmin<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It gets the simple label of the instance to show it in the <strong>BackEnd<\/strong>.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>label<\/em><\/strong><br \/>\r\n\t\t\t<em>($name)<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It gets the label of the multiple attributes of the instance. Usually the system saves only the ids of these attributes, this function is used to get the literal value.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>url<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It gets the public URL to access the instance in the public site.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>urlAdmin<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It gets the URL to access the instance in the <strong>BackEnd<\/strong>.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>link<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It creates an a-href link using the <em>url()<\/em> and the <em>getBasicInfo()<\/em> function. It is very handy when creating the user interface of the site.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>getImageUrl <\/em><\/strong><br \/>\r\n\t\t\t<em>($attributeName, $version=&#39;&#39;)<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It gets the url of the image attribute using its name. There are several versions of the image which are <em>public<\/em>, <em>small<\/em>, <em>thumb<\/em> and <em>huge<\/em>. You can configure the dimensions of these images in the configuration file.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>getImage<\/em><\/strong><br \/>\r\n\t\t\t<em>($attributeName, $version=&#39;&#39;, $alternative=&#39;&#39;)<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It creates the <em>img<\/em> tag with the url of the image. If it doesn&#39;t exists you can add another element or an empty image using the <em>$alternative<\/em> variable.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>getFileUrl<\/em><\/strong><br \/>\r\n\t\t\t<em>($attributeName)<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It gets the url of the file attribute using its name.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>showUi<\/em><\/strong><br \/>\r\n\t\t\t<em>($functionName, $params=array())<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is a shortcut to create a <strong>View<\/strong> component and render the proper <strong>HTML<\/strong> code defined in the <em>$functionName<\/em>. We can also send some extra parameters to the rendering function.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<h3>Db_ObjectType.php<\/h3>\r\n\r\n<p>It is the function that maps the structure of <strong>Asterion<\/strong> objects in the different <strong>MySQL<\/strong> fields.<\/p>\r\n\r\n<h3>Db_Sql.php<\/h3>\r\n\r\n<p>It is the class that connects the object with the database in a logical level. It can be considered as the data-extension of the <strong>Db_Object<\/strong> file. All of the main functions in this class receive an array with options. This array has usually the same information to build the <strong>MySQL<\/strong> queries:<\/p>\r\n\r\n<table class=\"tableInfo  tableInfo2 \">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>id<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It gets the unique <em>id<\/em> of the instance.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>get<\/em><\/strong><br \/>\r\n\t\t\t<em>($name)<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the universal getter. It gets any attribute of the instance. It can be used, for example, to get the name or description of an instance.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>set<\/em><\/strong><br \/>\r\n\t\t\t<em>($name, $value)<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the universal setter. It sets the <em>$value<\/em> to the attribute <em>$name<\/em>.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>getBasicInfo<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It gets the simple label of the instance, we use it usually for the <strong>FrontEnd<\/strong>.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>getBasicInfoAdmin<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It gets the simple label of the instance to show it in the <strong>BackEnd<\/strong>.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>The functions to retrieve information are:<\/p>\r\n\r\n<table class=\"tableInfo  tableInfo2 \">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>read<\/em><\/strong><br \/>\r\n\t\t\t<em>($id, $options=array())<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It reads an element using its <em>id<\/em>.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>readFirst<\/em><\/strong><br \/>\r\n\t\t\t<em>($options=array())<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It reads the first element using certain query conditions.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>readList<\/em><\/strong><br \/>\r\n\t\t\t<em>($options=array())<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It reads a list of objects using certain query conditions.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>readListQuery<\/em><\/strong><br \/>\r\n\t\t\t<em>($query)<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It reads a list of objects using a simple query. It can be used as an alternative when the queries are complicated.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>countResults<\/em><\/strong><br \/>\r\n\t\t\t<em>($options=array())<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It gives the number of results of a certain query. It is useful to perform quick calculations like the amount of posts in a certain category.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>The functions to manage information are:<\/p>\r\n\r\n<table class=\"tableInfo  tableInfo2 \">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em><strong>insert<\/strong><br \/>\r\n\t\t\t($values, $options=array())<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It inserts the information on the values array to the database. If the <em>id<\/em> is present in the values it modifies it.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em><strong>modify<\/strong><br \/>\r\n\t\t\t($values, $options=array())<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It updates the information on the values array to the database.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em><strong>modifySimple<\/strong><br \/>\r\n\t\t\t($attribute, $value)<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It updates a simple attribute of the object on the database. It is useful when we just need to update a single field like an activation.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>delete<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It deletes the record of the object in the database. It also deletes all of the associated files.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<h3><br \/>\r\nSimple examples of the Db object usage<\/h3>\r\n\r\n<p>In this section we will see some simple examples using a Post object that is composed of an id, a title, an image and a description field.<\/p>\r\n\r\n<p>To create an instance of the object.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$post = new Post();<\/code><\/pre>\r\n\r\n<p>To save some information on the database.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$post-&gt;insert(array('title'=&gt;'My new post', 'description'=&gt;'Description of my new post'));<\/code><\/pre>\r\n\r\n<p>To update the information on the database.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$post-&gt;modify(array('title'=&gt;'The new title of my post', 'description'=&gt;'The new description of my new post'));<\/code><\/pre>\r\n\r\n<p>To update simple information on the database.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$post-&gt;modifySimple('title', 'Another title for my post');<\/code><\/pre>\r\n\r\n<p>To delete the entire information on the database of this record.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$post-&gt;delete();<\/code><\/pre>\r\n\r\n<p>To read the post with the id &quot;11&quot;.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$post = Post::read(11);<\/code><\/pre>\r\n\r\n<p>To read the last created post in the database.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$post = Post::readFirst(array('order'=&gt;'created DESC'));<\/code><\/pre>\r\n\r\n<p>To read all the posts ordered alphabetically.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$posts = Post::readList(array('order'=&gt;'title'));<\/code><\/pre>\r\n\r\n<p>To read the first three posts that have a title that ends with the letter &quot;Z&quot; ordered by title alphabetically.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$posts = Post::readList(array('where'=&gt;'title LIKE \"%Z\"', 'order'=&gt;'title', 'limit'=&gt;'3'));<\/code><\/pre>\r\n\r\n<p>To read all the posts that start with the letter &quot;A&quot; order by the creation date using the direct query.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$posts = Post::readListQuery('SELECT * FROM Post WHERE title LIKE \"A%\" ORDER BY created');<\/code><\/pre>\r\n\r\n<h2>View object - Ui<\/h2>\r\n\r\n<p>The <strong>Ui object<\/strong> is the <strong>&quot;View&quot;<\/strong> component of the <strong>MVC pattern<\/strong>. It has to be constructed with an instance of the <strong>Db object<\/strong> and its main function is to render it, usually in <strong>HTML markup<\/strong> code, but sometimes also in <strong>XML<\/strong>, <strong>JSON<\/strong> or <strong>CSV<\/strong> modes.<\/p>\r\n\r\n<p>This component has only the <em>Ui.php<\/em> file and the most used functions are:<\/p>\r\n\r\n<table class=\"tableInfo  tableInfo2 \">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>renderPublic<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the main <em>render<\/em> function. By default it just shows the basic information. Every new content class should override this function.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>renderLink<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It renders a simple a-href link based on the <em>url()<\/em> and <em>getBasicInfo()<\/em> functions of the object.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>renderEmail<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It renders a basic paragraph with all of the information of the object. It is mainly used to be attached when sending emails.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>renderSitemap<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It renders an <strong>XML<\/strong> block in the format of a <strong>Google Sitemap<\/strong> with the information of the object.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>renderRss<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It renders an <strong>XML<\/strong> block in the <strong>RSS<\/strong> format with the information of the object.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>All of the content objects inherit from this class and it is in their own <strong>Ui<\/strong> classes that you should create the proper render functions. There you can create for example a renderIntro for the elements in the main page, or <em>renderSide<\/em> for the elements in the sidebar.<\/p>\r\n\r\n<h3>Simple examples of the Ui object usage<\/h3>\r\n\r\n<p>In this section we will see some simple examples using a <strong>Post<\/strong> object that is composed of an <em>id<\/em>, a <em>title<\/em>, an <em>image<\/em> and a <em>description<\/em> field.<\/p>\r\n\r\n<p>First we need to retrieve an instance of the object and create its user interface.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$post = new Post();\r\n$postUi = new Post_Ui($post);<\/code><\/pre>\r\n\r\n<p>To render the public version of the object.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">echo $postUi-&gt;renderPublic();<\/code><\/pre>\r\n\r\n<p>Or directly:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">echo $post-&gt;showUi('Public');<\/code><\/pre>\r\n\r\n<p>To render a list of the first four objects ordered by the creation date and rendered with the renderSide function.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$posts = Post::readList(array('order'=&gt;'created DESC', 'limit'=&gt;'4'));\r\n$html = '';\r\nforeach ($posts as $post) {\r\n\u00a0\u00a0 $html .= $post-&gt;showUi('Side');\r\n}\r\necho $html;<\/code><\/pre>\r\n\r\n<h2>Controller object<\/h2>\r\n\r\n<p>The <strong>Controller<\/strong> object is the <strong>&quot;Controller&quot; <\/strong>component of the <strong>MVC pattern<\/strong>. This object is used mostly for the options in the <strong>BackEnd<\/strong> because we would not really need to control the content objects directly in the <strong>FrontEnd<\/strong>.<\/p>\r\n\r\n<p>This component has a <em>Controller_Factory.php<\/em> and a <em>Controller.php<\/em> file. The main function of this object is:<\/p>\r\n\r\n<table class=\"tableInfo  tableInfo2 \">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>renderPublic<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the main render function. By default it just shows the basic information. Every new content class should override this function.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>Usually inherited objects of this class are not modified. You can override the <em>controlActions<\/em> function in certain cases. For example, if you need to create reports in the <strong>BackEnd<\/strong>.<\/p>\r\n\r\n<h2>Other base objects<\/h2>\r\n\r\n<h3>Cookie<\/h3>\r\n\r\n<p>It is a functional object that is useful to manipulate cookie variables. Its functions are:<\/p>\r\n\r\n<table class=\"tableInfo  tableInfo2 \">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>get<\/em><\/strong><br \/>\r\n\t\t\t<em>($name)<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It gets a cookie using its name.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>set<\/em><\/strong><br \/>\r\n\t\t\t<em>($name, $value)<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It sets a value in a cookie.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>delete<\/em><\/strong><br \/>\r\n\t\t\t<em>($name)<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It deletes a cookie using its name.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<h3>Date<\/h3>\r\n\r\n<p>It is a functional object that is useful to manipulate dates. Its most interesting functions are:<\/p>\r\n\r\n<table class=\"tableInfo  tableInfo2 \">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>sqlArray<\/em><\/strong><br \/>\r\n\t\t\t<em>($date, $trim=true)<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It converts a <strong>MySQL<\/strong> formatted date to an array.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>sqlText<\/em><\/strong><br \/>\r\n\t\t\t<em>($date, $withHour=false)<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It converts a <strong>MySQL<\/strong> formatted date into a labelled format. It would convert <em>&quot;01-01-1990&quot;<\/em> into <em>&quot;1 January, 1990&quot;<\/em>.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>sqlInt<\/em><\/strong><br \/>\r\n\t\t\t<em>($date)<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It gets the timestamp of a <strong>MySQL<\/strong> formatted date.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>difference<\/em><\/strong><br \/>\r\n\t\t\t<em>($dateStart, $dateEnd)<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It returns an array with the difference between to <strong>MySQL<\/strong> formatted dates.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<h3>Email<\/h3>\r\n\r\n<p>It has a single function that sends an email and adds the proper headers to do so.<\/p>\r\n\r\n<h3>File<\/h3>\r\n\r\n<p>It is a functional object that manages everything related to files including uploads or saving information. Its most used functions are:<\/p>\r\n\r\n<table class=\"tableInfo  tableInfo2 \">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em><strong>uploadUrl<\/strong><br \/>\r\n\t\t\t($url, $objectName, $uploadName)<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It uploads a file using its <strong>URL<\/strong> for a certain object to use. It uploads the file to the stock folder.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em><strong>upload<\/strong><br \/>\r\n\t\t\t($objectName, $name, $uploadName=&#39;&#39;)<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It uploads a file using the <em>$_FILES<\/em> global array using the name of the attribute. It uploads the file to the stock folder.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em><strong>saveFile<\/strong><br \/>\r\n\t\t\t($file, $content, $tiny=false)<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It saves content to a file in the server.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em><strong>download<\/strong><br \/>\r\n\t\t\t($file, $options=array())<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It modifies the header and forces the browser to download a file.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<h3>Form<\/h3>\r\n\r\n<p>It is an object that constructs forms. It is inherited in the content objects to create their forms automatically. Its most important functions are:<\/p>\r\n\r\n<table class=\"tableInfo  tableInfo2 \">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em><strong>field<\/strong><br \/>\r\n\t\t\t($attribute)<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It renders the default field for an object attribute. The field is defined by the type property in the <strong>XML<\/strong> file.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em><strong>createFormField<\/strong><br \/>\r\n\t\t\t($item, $options=array())<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It creates a simple form field of an item defined in the <strong>XML<\/strong> file.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em><strong>createFormFields<\/strong><br \/>\r\n\t\t\t($options=array())<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It creates the default form fields for the object defined in the <strong>XML<\/strong> file. It can be overridden for special formatting.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em><strong>createForm<\/strong><br \/>\r\n\t\t\t($fields, $options=array())<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It creates a form adding the proper headers and a submit button.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em><strong>isValidField<\/strong><br \/>\r\n\t\t\t($item)<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It checks if a certain field is valid according to the required property in the <strong>XML<\/strong> file.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>isValid<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It checks if all of the fields in the form are valid.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<h3><br \/>\r\nFormFields<\/h3>\r\n\r\n<p>The <strong>FormFields<\/strong> objects must render the different form field types. They all share two functions:<\/p>\r\n\r\n<table class=\"tableInfo  tableInfo2 \">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em><strong>create<\/strong><br \/>\r\n\t\t\t($options)<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is a static version that renders the proper field using certain options. The most common options include:<\/p>\r\n\r\n\t\t\t<ul>\r\n\t\t\t\t<li>\r\n\t\t\t\t<p><em>name<\/em>. It is the name of the field.<\/p>\r\n\t\t\t\t<\/li>\r\n\t\t\t\t<li>\r\n\t\t\t\t<p><em>id<\/em>. It is the HTML id of the field.<\/p>\r\n\t\t\t\t<\/li>\r\n\t\t\t\t<li>\r\n\t\t\t\t<p><em>class<\/em>. It is the HTML class of the field.<\/p>\r\n\t\t\t\t<\/li>\r\n\t\t\t\t<li>\r\n\t\t\t\t<p><em>label<\/em>. It is the general label of the field.<\/p>\r\n\t\t\t\t<\/li>\r\n\t\t\t\t<li>\r\n\t\t\t\t<p><em>value<\/em>. It is the main value of the object. In the case of a select-box is the array with the different options and it uses the selected attribute for the value.<\/p>\r\n\t\t\t\t<\/li>\r\n\t\t\t\t<li>\r\n\t\t\t\t<p><em>disabled<\/em>. It is used if the field is not modifiable.<\/p>\r\n\t\t\t\t<\/li>\r\n\t\t\t\t<li>\r\n\t\t\t\t<p><em>error<\/em>. It is the label for the error message.<\/p>\r\n\t\t\t\t<\/li>\r\n\t\t\t<\/ul>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>show<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the direct function of the object. It uses the previous create function as the base.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<h3><br \/>\r\nSimple examples of the Form and FormFields object usage<\/h3>\r\n\r\n<p>In this section we will see some simple examples using a Comment object that is composed of an id, a name and a message field.<\/p>\r\n\r\n<p>To create and empty form of a comment.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$commentForm = new Comment_Form();\r\necho Form::createForm($commentForm-&gt;createFormFields(), array('submit'=&gt;'Save this form'));<\/code><\/pre>\r\n\r\n<p>To create a version of the form that has only the id and the name.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$commentForm = new Comment_Form();\r\n$fields = '';\r\n$fields .= $commentForm-&gt;field('idComment');\r\n$fields .= $commentForm-&gt;field('name');\r\necho Form::createForm($fields, array('submit'=&gt;'Save the name of the comment'));<\/code><\/pre>\r\n\r\n<p>To create a form of an existing object.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$comment = Comment::readFirst();\r\n$commentForm = Comment_Form::newObject($comment);\r\necho Form::createForm($commentForm-&gt;createFormFields(), array('submit'=&gt;'Update this comment'));<\/code><\/pre>\r\n\r\n<h3>Image<\/h3>\r\n\r\n<p>The <em>Image.php<\/em> and <em>Image_File.php<\/em> objects have functions to manipulate images, mainly to create different formats and saving them in the server. The Image object will perform all of the operations for resizing and manipulating and the Image_File will save the files to the server.<\/p>\r\n\r\n<h3>Init<\/h3>\r\n\r\n<p>This functional object will initialize the website creating the first tables that are needed for starting a project.<\/p>\r\n\r\n<h3>ListObjects<\/h3>\r\n\r\n<p>This object will manage a list of objects and will also deal with the pagination of them. The constructor will take the name of the object and extra options which include all the conditions to query the results that we saw in the <strong>Db<\/strong> object. This object will add the following options:<\/p>\r\n\r\n<table class=\"tableInfo  tableInfo2 \">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>message<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the message to show if there are no results.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>results<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the number of results to show when using pagination.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>The most used functions of this object are:<\/p>\r\n\r\n<table class=\"tableInfo  tableInfo2 \">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>isEmpty<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is a simple boolean function that tells if the list is empty or not.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em><strong>showList<\/strong><br \/>\r\n\t\t\t($options=array(), $params=array())<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the main function that renders the list creating <strong>Ui<\/strong> objects. We can send additional parameters to this render using an array.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>pager<\/em><\/strong><br \/>\r\n\t\t\t<em>($options=array())<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It renders a pagination list for the list.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em><strong>showListPager<\/strong><br \/>\r\n\t\t\t($options=array(), $params=array())<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It renders the objects of the list with before and after paginations.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<h3>Simple examples of the ListObjects object usage<\/h3>\r\n\r\n<p>In this section we will see some simple examples using a <strong>Post object<\/strong> that is composed of an <em>id<\/em>, a <em>title<\/em>, an <em>image<\/em> and a <em>description<\/em> field.<\/p>\r\n\r\n<p>With the <strong>ListObjects<\/strong> we do not need to retrieve instances, it handles it all. In this case we render a list of all the posts ordered by the creation date.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$posts = new ListObjects('Post', array('order'=&gt;'created DESC'));\r\necho $posts-&gt;showList(array('function'=&gt;'Public'));<\/code><\/pre>\r\n\r\n<p>To create a simple search and render the results or a message in case none exists.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$searchQuery = \"my search\";\r\n$posts = new ListObjects('Post', array('where'=&gt;'title LIKE \"%'.$searchQuery.'%\"', 'message'=&gt;'There are no results'));\r\necho $posts-&gt;showList(array('function'=&gt;'SearchResult'));<\/code><\/pre>\r\n\r\n<h3>Session<\/h3>\r\n\r\n<p>It is a functional object that is useful to manipulate session variables. The functions are:<\/p>\r\n\r\n<table class=\"tableInfo  tableInfo2 \">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em><strong>get<\/strong><br \/>\r\n\t\t\t($name)<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It gets a session variable using its name.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em><strong>set<\/strong><br \/>\r\n\t\t\t($name, $value)<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It sets a value in a session variable.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><em><strong>delete<\/strong><br \/>\r\n\t\t\t($name)<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It deletes a session variable using its name.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<h3>Text<\/h3>\r\n\r\n<p>It is a functional object that has some handy functions to manipulate text. It is used minimize text, format numbers or code HTML text.<\/p>\r\n\r\n<h3>Url<\/h3>\r\n\r\n<p>It is a functional object that deals with URLs, the most important function are the init and <em>initLang<\/em>, those are in charge of reading the contents of the URL and creating the proper global variables.<\/p>\r\n\r\n<h3>XML<\/h3>\r\n\r\n<p>It is a functional object that is used to manipulate the <strong>XML<\/strong> format, it creates headers for <strong>GoogleSitemaps<\/strong> or <strong>XML<\/strong> files.<\/p>\r\n"},{"ord":"10","idDocumentation":"11","title":"The Navigation object","titleUrl":"the-navigation-object","idDocumentationCategory":"4","shortDescription":"This is the document for the main navigation object in Asterion.","description":"<p>As we already saw in the example of the previous sections, the simplicity of <strong>Asterion<\/strong> is based on the fact that everything is managed by the <strong>Navigation<\/strong> object, which is the most important of the functional objects. This object is composed of two files:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">\/base\/lib\/Navigation\/Navigation_Controller.php\r\n\/base\/lib\/Navigation\/Navigation_Ui.php<\/code><\/pre>\r\n\r\n<p>This controller file has a big function named <em>controlActions<\/em> that can be seen as a router. This function is just a huge switch of the different actions. So for example we will have the following actions:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">http:\/\/www.mysite.com\/ =&gt; intro (action by default)\r\nhttp:\/\/www.mysite.com\/about-us =&gt; about-us\r\nhttp:\/\/www.mysite.com\/products =&gt; products\r\nhttp:\/\/www.mysite.com\/products\/boat =&gt; products\r\nhttp:\/\/www.mysite.com\/products\/boat\/rent =&gt; products<\/code><\/pre>\r\n\r\n<p>The <em>controlActions<\/em> function has to return some content. As an example for this case we could have something like:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public function controlActions(){\r\n\u00a0\u00a0\u00a0 switch ($this-&gt;action) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 default:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 case 'intro':\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return \"Intro page\";\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 break;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 case 'about-us':\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return \"This is the content for the page 'About us'\";\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 break;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 case 'products':\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return \"This is the content for the page 'Products'\";\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 break;\r\n\u00a0\u00a0\u00a0 }\r\n}<\/code><\/pre>\r\n\r\n<p>At first, this function will render the same content for the URLs:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">http:\/\/www.mysite.com\/products\r\nhttp:\/\/www.mysite.com\/products\/boat\r\nhttp:\/\/www.mysite.com\/products\/boat\/rent<\/code><\/pre>\r\n\r\n<p>Because we are only analyzing the <em>$action<\/em> variable. For these cases we have two additional variables: <em>$id<\/em> that would be boat and <em>$extraId<\/em> that would be rent. Depending on what we want to do, we can create another switch inside like:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public function controlActions(){\r\n\u00a0\u00a0\u00a0 switch ($this-&gt;action) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 default:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 case 'intro':\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return \"Intro page\";\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 break;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 case 'about-us':\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return \"This is the content for the page 'About us'\";\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 break;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 case 'products':\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 switch ($this-&gt;id) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 default:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return \"This is the content for the page 'Products'\";\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 break;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 case 'boat':\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 switch ($this-&gt;extraid) {\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 default:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return \"This is the content for the page 'Rent boat'\";\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 break;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 case 'boat':\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return \"This is the content for the page 'Boat'\";\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 break;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 break;\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 break;\r\n\u00a0\u00a0\u00a0 }\r\n}<\/code><\/pre>\r\n\r\n<p>This illustrates the idea is that you have complete freedom on the routing and coding of your website. You can actually code your entire website in this file, but <strong>Asterion<\/strong> provides some tools to keep this file as clean as possible. In the end, it all depends on how you want to render your content.<\/p>\r\n\r\n<p>Just as a recall, in <strong>Asterion<\/strong> we have only three levels for the URLs that are defined by:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">http:\/\/localhost\/asterion\/$action\/$id\/$extraId<\/code><\/pre>\r\n\r\n<p>The language and the pagination in the URL have other treatment. Normally we wouldn&#39;t need anything else, but that&#39;s probably one flaw of this framework. We cannot make long URLs like<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">http:\/\/www.mysite.com\/2007\/06\/01\/posts\/general\/mypost.html<\/code><\/pre>\r\n\r\n<p>But, we never found a reason to have so many levels, usually with <em>$action<\/em> and <em>$id<\/em> we can solve almost all of our problems and rarely we would use the <em>$extraId<\/em>.<\/p>\r\n"},{"ord":"11","idDocumentation":"12","title":"Content objects","titleUrl":"content-objects","idDocumentationCategory":"4","shortDescription":"This document describes content objects using a Post as an example.","description":"<pre>\r\n<code class=\"language-xml\">&lt;name&gt;ProductCategory&lt;\/name&gt;<\/code><\/pre>\r\n\r\n<p>As we stated, a content object in <strong>Asterion<\/strong> is a collection of minimum 5 files that have to be in a specific folder.<\/p>\r\n\r\n<p>For example in the case of a <em>Post<\/em> we have:<\/p>\r\n\r\n<ol>\r\n\t<li><em>Post.php<\/em> is the file where we define and access the object.<\/li>\r\n\t<li><em>Post.xml<\/em> is the file where we define the structure of the object and its fields and properties.<\/li>\r\n\t<li><em>Post_Form.php<\/em> is the file where we will create forms for the object.<\/li>\r\n\t<li><em>Post_Controller.php<\/em> is the file that controls the object in a general way.<\/li>\r\n\t<li><em>Post_Ui.php<\/em> is the file that renders the object in <em>HTML<\/em>, <em>JSON<\/em> or <em>XML<\/em>.<\/li>\r\n<\/ol>\r\n\r\n<p>To create an object you must add a folder that contains these 5 files in the public <em>lib<\/em> folder. There is a naming camel-case convention, for example if your object is named <strong>&quot;product category&quot;<\/strong> you should create:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">\/asterion\/lib\/ProductCategory\r\n\/asterion\/lib\/ProductCategory\/ProductCategory.php\r\n\/asterion\/lib\/ProductCategory\/ProductCategory.xml\r\n\/asterion\/lib\/ProductCategory\/ProductCategory_Form.php\r\n\/asterion\/lib\/ProductCategory\/ProductCategory_Controller.php\r\n\/asterion\/lib\/ProductCategory\/ProductCategory_Ui.php<\/code><\/pre>\r\n\r\n<p>We will take the <em>ProductCategory<\/em> object as an example of a minimal one as it only has one attribute its name. So let&#39;s start by creating the structure.<\/p>\r\n\r\n<p>Asterion relies the structure of the objects in a <strong>XML<\/strong> file, this way our objects can be portable. Any program can read a <strong>XML<\/strong> file so if you want to export your objects to another system or <strong>CMS<\/strong> you can easily do it by parsing this file.<\/p>\r\n\r\n<h2>A simple example of a content object<\/h2>\r\n\r\n<p>To better understand how a content object is managed, we are going to analyze a simple object like the <em>ProductCategory<\/em>. This object has only one attribute which is its name.<\/p>\r\n\r\n<p>Its XML structure file will be:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-xml\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\r\n&lt;object&gt;\r\n    &lt;name&gt;Category&lt;\/name&gt;\r\n    &lt;info&gt;\r\n        &lt;sql&gt;\r\n            &lt;primary&gt;idCategory&lt;\/primary&gt;\r\n        &lt;\/sql&gt;\r\n        &lt;form&gt;\r\n            &lt;title&gt;categories&lt;\/title&gt;\r\n            &lt;templateItemAdmin&gt;\r\n                &lt;p class=\"accent\"&gt;&lt;strong&gt;#name&lt;\/strong&gt;&lt;\/p&gt;\r\n            &lt;\/templateItemAdmin&gt;\r\n        &lt;\/form&gt;\r\n    &lt;\/info&gt;\r\n    &lt;attributes&gt;\r\n        &lt;attribute&gt;\r\n            &lt;name&gt;idCategory&lt;\/name&gt;\r\n            &lt;type&gt;id-autoincrement&lt;\/type&gt;\r\n        &lt;\/attribute&gt;\r\n        &lt;attribute&gt;\r\n            &lt;name&gt;name&lt;\/name&gt;\r\n            &lt;label&gt;name&lt;\/label&gt;\r\n            &lt;type&gt;text-long&lt;\/type&gt;\r\n        &lt;\/attribute&gt;\r\n    &lt;\/attributes&gt;\r\n&lt;\/object&gt;<\/code><\/pre>\r\n\r\n<p>In this part we will explain this file, however the complete guidelines to create the <strong>XML<\/strong> file are in an <strong>Annex<\/strong> to this document.<\/p>\r\n\r\n<p>Basically this file is divided in the following sections:<\/p>\r\n\r\n<ul>\r\n\t<li><strong><em>name<\/em><\/strong>. This is the name of the object written in camel case. This name will be used to create the table in the database and it has to be the same that we are using in the folder and files of the object.<\/li>\r\n\t<li><strong><em>info<\/em><\/strong>. Here we have different blocks that define the object itself. The minimal example has two blocks:\r\n\t<ul>\r\n\t\t<li><strong><em>sql<\/em><\/strong>. Here we will define basic information on the object for the <strong>MySQL<\/strong> database. Usually we need a primary key that by convention will be the name of the object preceded by id. The engine is used when we create the database, most of the time we will just use <strong>MyISAM<\/strong>.<\/li>\r\n\t\t<li><strong><em>form<\/em><\/strong>. The framework provides an automatic page to control its objects. In this section we define the <em>title<\/em> of that page, the label of the object and some extra information like pagination, order or the permissions that a certain user must have.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n\t<li><strong><em>attributes<\/em><\/strong>. This is a simple collection of the attributes that an object has. Each attribute must have a <em>name<\/em> and a <em>type<\/em>. It can also have a <em>label<\/em> and extra information on it. In this case we created two attributes:\r\n\t<ul>\r\n\t\t<li><strong><em>idProductCategory<\/em><\/strong>, which is the <em>id<\/em> of this object, as a <strong>type<\/strong> has <em>id-autoincrement<\/em> and that tells <strong>Asterion<\/strong> to perform a series of actions like creating an integer field in the database that would be used as the primary key.<\/li>\r\n\t\t<li><strong><em>name<\/em><\/strong>, this attribute has <em>text-long<\/em> as type. <strong>Asterion<\/strong> will then create a <em>VARCHAR(255)<\/em> field in the database and the default form object will be an input text.<\/li>\r\n\t<\/ul>\r\n\t<\/li>\r\n<\/ul>\r\n\r\n<p>Now that we have the structure in the <em>ProductCategory.xml<\/em> file, we continue with the <em>ProductCategory.php<\/em> file. In a minimal example, it looks like:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">class ProductCategory extends Db_Object {\r\n    public function getBasicInfo() {\r\n        return $this-&gt;get('name');\r\n    }\r\n    public function url() {\r\n        return url('product-category\/'.$this-&gt;id());\r\n    }\r\n}<\/code><\/pre>\r\n\r\n<p>One interesting thing is that even that this is the main object we do not define the attributes, getters or setters here. Everything is inherited from the <em>Db_Object<\/em> class which is the one that will perform all the common actions like reading the information from the database, saving it, modifying it and performing general actions of the objects.<\/p>\r\n\r\n<p>In <strong>Asterion<\/strong> the game is to overwrite functions. In this case we did it with two of the most used functions:<\/p>\r\n\r\n<ul>\r\n\t<li>The <strong><em>getBasicInfo()<\/em><\/strong> function returns simply a label for the object. If you have a <em>Post<\/em> object it should return the title of the post, if you have a <em>Person<\/em> object it should return its name or email.<\/li>\r\n\t<li>The <strong><em>url()<\/em><\/strong> function returns the public path to access this object for public view, in this case we want it to render something like <em>http:\/\/www.mysite.com\/product-category\/3<\/em>, where we will list all the products of the third category. <strong>Asterion<\/strong> doesn&#39;t have a magic routing system, you would still have to program the <em>product-category<\/em> action in the <em>Navigation_Controller.php<\/em> file in order for it to work.<\/li>\r\n<\/ul>\r\n\r\n<p>Then we will create the <em>ProductCategory_Form.php<\/em> and the <em>ProductCategory_Controller.php<\/em> files that are not really important to understand an object. This is because we would usually not need to modify them for the <strong>FrontEnd<\/strong> except in certain cases. Anyways they must have this minimal code on them:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">class ProductCategory_Controller extends Controller {}\r\n\r\nclass ProductCategory_Form extends Form {}<\/code><\/pre>\r\n\r\n<p>As you can see they both inherit of the main <em>Controller<\/em> and <em>Form<\/em> classes that perform the main tasks. We will use these classes in the future to overwrite some functions or to create special functions or the forms of our objects.<\/p>\r\n\r\n<p>Finally we need to create the user interface object. In this file we will render the object for all the possible purposes. This <em>Ui<\/em> class should render the proper <strong>HTML<\/strong>, <strong>JSON<\/strong>, <strong>TXT<\/strong> or <strong>XML<\/strong> code of the object.<\/p>\r\n\r\n<p>A minimal example should look like:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">class ProductCategory_Ui extends Ui{\r\n  public function __construct(ProductCategory &amp; $object) {\r\n    $this-&gt;object = $object;\r\n  }\r\n  public renderPublic() {\r\n    return '&lt;p&gt;Hello, I am the category &lt;em&gt;'.$this-&gt;object-&gt;get('name').'&lt;\/em&gt;&lt;br\/&gt;and I have the id number &lt;strong&gt;'.$this-&gt;object-&gt;id().'&lt;strong&gt;.&lt;br\/&gt; You can go to my complete page clicking &lt;a href=\"'.$this-&gt;object-&gt;url().'\"&gt;here&lt;\/a&gt;.&lt;\/p&gt;';\r\n  }\r\n  public renderComplete() {\r\n    return '&lt;p&gt;Hello, I am the complete page for the category &lt;em&gt;'.$this-&gt;object-&gt;get('name').'&lt;\/em&gt;&lt;\/p&gt;';\r\n  }\r\n}<\/code><\/pre>\r\n\r\n<p>In this example we show a simple render, usually we use the convention that every function must start with the word render followed by the type or version of the result. So we could have functions like <em>renderPublic<\/em>, <em>renderComplete<\/em>, <em>renderXML<\/em> or <em>renderJSON<\/em>.<\/p>\r\n\r\n<h2>Managing the content objects in the BackEnd<\/h2>\r\n\r\n<p>Following the previous example, we can now view the part where Asterion shows its power. So, once that you are logged to the BackEnd at:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">http:\/\/localhost\/asterion\/admin<\/code><\/pre>\r\n\r\n<p>You will have a complete page to manage the <em>ProductCategory<\/em> object that we created in the following address:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">http:\/\/localhost\/asterion\/admin\/ProductCategory<\/code><\/pre>\r\n\r\n<p>There you will see the following page where you can <strong>insert<\/strong>, <strong>modify<\/strong> or <strong>delete<\/strong> some of them:<\/p>\r\n\r\n<p style=\"text-align: center;\"><img alt=\"\" src=\"\/asterion\/asterion\/stock\/uploaded\/images\/asterion_categories.png\" style=\"max-width: 100%;\" \/><strong>Figure<\/strong>: Example of the automatically generated system.<\/p>\r\n\r\n<p>The address follows one of the following structures:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">http:\/\/localhost\/asterion\/admin\/$nameObject\r\nhttp:\/\/localhost\/asterion\/$language\/admin\/$nameObject<\/code><\/pre>\r\n\r\n<p>Where the <em>$nameObject<\/em> element is the name of the object and the <em>$language<\/em> element is the eventual language of the <strong>BackEnd<\/strong>.<\/p>\r\n\r\n<p>As you can see, Asterion already builds all the proper forms to insert or modify the records. It also creates all the necessary elements to order or delete these records.<\/p>\r\n\r\n<p>If you need to change the structure of your object the best is to recreate it or to map your new structure with the database.<\/p>\r\n\r\n<h2>Rendering the content objects in the FrontEnd<\/h2>\r\n\r\n<p>Following our example on the <em>ProductCategory<\/em>, we imagine that we saved some records in our database. In this section we will see how we will present them to the public in the <strong>FrontEnd<\/strong>.<\/p>\r\n\r\n<p>We have to recall that all the rendering of the <strong>FrontEnd<\/strong> in centralized in the <em>Navigation_Controller.php<\/em> file and that the main function to produce the content in our website is the <em>controlActions<\/em> function. So we can imagine in our example:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public function controlActions(){\r\n  switch ($this-&gt;action) {\r\n    default:\r\n      $items = new ListObjects('ProductCategory');\r\n      $content .= $items-&gt;showList();\r\n      return $content;\r\n    break;\r\n    case 'product-category':\r\n      $item = ProductCategory::read($this-&gt;id);\r\n      return $item-&gt;showUi('Complete');\r\n    break;\r\n  }\r\n}<\/code><\/pre>\r\n\r\n<p>What we did in this function is add two actions to our website:<\/p>\r\n\r\n<ul>\r\n\t<li><strong><em>default<\/em><\/strong>. The default action will render content to any public URL in our website since we define it using the default term. There we render the list of all created records using the <em>ListObjects<\/em>.<\/li>\r\n\t<li><strong><em>product-category<\/em><\/strong>. This action will parse the single URLs of the <em>ProductCategory<\/em> object and render the complete version of them.<\/li>\r\n<\/ul>\r\n\r\n<h2>Linking content objects<\/h2>\r\n\r\n<p>The philosophy behind <strong>Asterion<\/strong> is that a website is just composed of objects. A website for a newspaper would have objects like <em>Journalist<\/em>, <em>News<\/em>, <em>Category<\/em> and <em>Tag<\/em>. A website for a book-selling store would have something like <em>Book<\/em>, <em>Author<\/em>, <em>Order<\/em>, <em>Customer<\/em> and <em>CustomerAddress<\/em>. A simple website that has only informative content would have only one object <em>Page<\/em>.<\/p>\r\n\r\n<p>To follow our example. Now that we have the categories for our products, let&#39;s create a <em>Product<\/em> object. First we create the following files:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">\/asterion\/lib\/Product\r\n\/asterion\/lib\/Product\/Product.php\r\n\/asterion\/lib\/Product\/Product.xml\r\n\/asterion\/lib\/Product\/Product_Form.php\r\n\/asterion\/lib\/Product\/Product_Controller.php\r\n\/asterion\/lib\/Product\/Product_Ui.php<\/code><\/pre>\r\n\r\n<p>Now, we have to add some attributes to the <em>Product.xml<\/em> file. In this example we will say that a <em>Product<\/em> is composed of a name, description, price and it belongs to a category. The <strong>XML<\/strong> file will look like:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-xml\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\r\n&lt;object&gt;\r\n  &lt;name&gt;Product&lt;\/name&gt;\r\n  &lt;info&gt;\r\n    &lt;sql&gt;\r\n      &lt;primary&gt;idProduct&lt;\/primary&gt;\r\n    &lt;\/sql&gt;\r\n    &lt;form&gt;\r\n      &lt;title&gt;Products&lt;\/title&gt;\r\n      &lt;label&gt;name&lt;\/label&gt;\r\n      &lt;pager&gt;100&lt;\/pager&gt;\r\n      &lt;orderBy&gt;name&lt;\/orderBy&gt;\r\n      &lt;groupBy&gt;idProductCategory&lt;\/groupBy&gt;\r\n    &lt;\/form&gt;\r\n  &lt;\/info&gt;\r\n  &lt;attributes&gt;\r\n    &lt;attribute&gt;\r\n      &lt;name&gt;idProduct&lt;\/name&gt;\r\n      &lt;type&gt;id-autoincrement&lt;\/type&gt;\r\n    &lt;\/attribute&gt;\r\n    &lt;attribute&gt;\r\n      &lt;name&gt;image&lt;\/name&gt;\r\n      &lt;label&gt;image&lt;\/label&gt;\r\n      &lt;type&gt;file&lt;\/type&gt;\r\n      &lt;mode&gt;image&lt;\/mode&gt;\r\n    &lt;\/attribute&gt;\r\n    &lt;attribute&gt;\r\n      &lt;name&gt;idProductCategory&lt;\/name&gt;\r\n      &lt;label&gt;category&lt;\/label&gt;\r\n      &lt;type&gt;select&lt;\/type&gt;\r\n      &lt;refObject&gt;ProductCategory&lt;\/refObject&gt;\r\n    &lt;\/attribute&gt;\r\n    &lt;attribute&gt;\r\n      &lt;name&gt;name&lt;\/name&gt;\r\n      &lt;label&gt;name&lt;\/label&gt;\r\n      &lt;type&gt;text-long&lt;\/type&gt;\r\n    &lt;\/attribute&gt;\r\n    &lt;attribute&gt;\r\n      &lt;name&gt;description&lt;\/name&gt;\r\n      &lt;label&gt;description&lt;\/label&gt;\r\n      &lt;type&gt;textarea-long&lt;\/type&gt;\r\n    &lt;\/attribute&gt;\r\n    &lt;attribute&gt;\r\n      &lt;name&gt;price&lt;\/name&gt;\r\n      &lt;label&gt;price&lt;\/label&gt;\r\n      &lt;type&gt;text-double&lt;\/type&gt;\r\n    &lt;\/attribute&gt;\r\n  &lt;\/attributes&gt;\r\n&lt;\/object&gt;<\/code><\/pre>\r\n\r\n<p>Compared to the <em>ProductCategory.xml<\/em> file we can see that <strong>Asterion<\/strong> offers more options. For example, we introduce some other types like the image type, that will create a field in the database of the type <em>VARCHAR(255)<\/em> where it will store the path of the image that we upload.<\/p>\r\n\r\n<p>Another new type is the select that will create an <em>INT<\/em> field in the database, this element references the <em>Product<\/em> with our first <em>ProductCategory<\/em> object and will be rendered as a <em>select-box<\/em> in the default form generated by <strong>Asterion<\/strong>. We finally add other types such as <em>textarea-long<\/em> and a <em>text-double<\/em> that will render as a textarea and an input field.<\/p>\r\n\r\n<p>You can have a complete description of all the types in <strong>Asterion<\/strong> in the Annex of this document. In <em>Asterion<\/em> you can create your own types, however with the ones provided you will solve almost all of the common situations.<\/p>\r\n\r\n<p>As you can see in this <strong>XML<\/strong> structure example, we added some attributes like <em>groupBy<\/em> that we use to show the items grouped by an attribute.<\/p>\r\n\r\n<p>Now, let&#39;s continue with the <em>Product.php<\/em> file:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">class Product extends Db_Object {\r\n  public function __construct($VALUES=array()) {\r\n    parent::__construct($VALUES);\r\n    $this-&gt;loadCategory();\r\n  }\r\n  public function loadCategory() {\r\n    $this-&gt;category = new ProductCategory();\r\n    if ($this-&gt;get('idProductCategory')!='') {\r\n      $this-&gt;category = ProductCategory::read($this-&gt;get('idProductCategory'));\r\n    }\r\n  }\r\n  public function getBasicInfo() {\r\n    return $this-&gt;get('name');\r\n  }\r\n  public function url() {\r\n    return $this-&gt;category-&gt;url().'\/'.$this-&gt;id();\r\n  }\r\n}<\/code><\/pre>\r\n\r\n<p>This is an example to show how flexible is <strong>Asterion<\/strong>. Normally when we instantiate an object we just do so and nothing else, but when we are dealing with objects like products we will probably need their categories to show them to the public, to create parents links and so on.<\/p>\r\n\r\n<p>This is why we create the category attribute in the product object and we use a function called <em>loadCategory<\/em> that loads it in case that it exists.<\/p>\r\n\r\n<p>As you can notice we use that category to create URLs like:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">http:\/\/localhost\/asterion\/product-category\/1\/2<\/code><\/pre>\r\n\r\n<p>Where <em>1<\/em> would be the <em>id<\/em> of the category and <em>2<\/em> the <em>id<\/em> of the product. The <em>Controller<\/em> and <em>Form<\/em> files do not change that much. For the moment we leave them with the default code:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">class Product_Controller extends Controller {}\r\n\r\nclass Product_Form extends Form {}<\/code><\/pre>\r\n\r\n<p>And finally the Ui file will help us understand how we can render also the information of the parent object, which is in this case the category:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">class Product_Ui extends Ui{\r\n  public function __construct(Product &amp; $object) {\r\n    $this-&gt;object = $object;\r\n  }\r\n  public renderPublic() {\r\n    return '&lt;p&gt;Hello, I am the product &lt;em&gt;'.$this-&gt;object-&gt;get('name').'&lt;\/em&gt;&lt;br\/&gt; and I have the id number &lt;strong&gt;'.$this-&gt;object-&gt;id().'&lt;strong&gt;.&lt;br\/&gt; You can go to my complete page clicking &lt;a href=\"'.$this-&gt;object-&gt;url().'\"&gt;here&lt;\/a&gt;.&lt;\/p&gt;';\r\n  }\r\n  public renderComplete() {\r\n    return '&lt;p&gt;Hello, I am the complete page for the product &lt;em&gt;'.$this-&gt;object-&gt;get('name').'&lt;\/em&gt;&lt;br\/&gt; My category name is &lt;em&gt;'.$this-&gt;object-&gt;category-&gt;getBasicInfo().'&lt;\/em&gt;&lt;br\/&gt; and you can visit my category clicking &lt;a href=\"'.$this-&gt;object-&gt;category-&gt;url().'\"&gt;here&lt;\/a&gt;.&lt;\/p&gt;';\r\n  }\r\n}\r\n<\/code><\/pre>\r\n\r\n<p>Finally, you can test the new <em>Product<\/em> object in the <em>BackEnd<\/em> at:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">http:\/\/localhost\/asterion\/admin\/Product<\/code><\/pre>\r\n\r\n<p>Now we need to render this product URL in the public page. This is why we have to edit the&nbsp; Navigation_Controller.php file once more:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public function controlActions(){\r\n  switch ($this-&gt;action) {\r\n    default:\r\n      $items = new ListObjects('ProductCategory');\r\n      $content .= $items-&gt;showList();\r\n      return $content;\r\n    break;\r\n    case 'product-category':\r\n      $item = Product::read($this-&gt;extraId);\r\n      if ($item-&gt;id()!='') {\r\n        $item = ProductCategory::read($this-&gt;id);\r\n      }\r\n      return $item-&gt;showUi('Complete');\r\n    break;\r\n  }\r\n}<\/code><\/pre>\r\n\r\n<p>As you can see we modified the <em>product-category<\/em> action. Now we check if there is a <em>Product<\/em> using the extraId variable of the URL. If not we just check for the category as before.<\/p>\r\n\r\n<p>This example was made to show that it is possible to create almost any structure with simple objects.<\/p>\r\n\r\n<p>It takes a while to master the conception of a structure, but we offer lots of sample objects for inspiration.<\/p>\r\n\r\n<h2>Simple content pages<\/h2>\r\n\r\n<p>If you are planning to have just simple content on your website, we have the object <em>Page<\/em> that manages the simple content pages like <strong>&quot;About us&quot;<\/strong>, <strong>&quot;Who are we&quot;<\/strong> or even <strong>&quot;Contact&quot;<\/strong>.<\/p>\r\n\r\n<p>This object has the following properties: a code, a name, some meta-data and the page itself. Since this object is used in almost all of our projects we already added to the core of <strong>Asterion<\/strong>.<\/p>\r\n\r\n<p>You can insert, modify or delete all the static pages in your website in the following URL of the BackEnd:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-bash\">http:\/\/localhost\/asterion\/admin\/Page<\/code><\/pre>\r\n\r\n<p>The object comes with two handy functions:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">static public function code($code) {\r\n    return Page::readFirst(array('where'=&gt;'code=\"'.$code.'\"'));\r\n}\r\nstatic public function show($code) {\r\n    $page = Page::code($code);\r\n    return '&lt;div class=\"pageSimple\"&gt;'.$page-&gt;get('description').'&lt;\/div&gt;';\r\n}\r\n<\/code><\/pre>\r\n\r\n<p>The first one named <em>code<\/em> helps us instantiate the object using its unique <em>code<\/em>. The second one named show renders the page directly using the code, so if you have a page like <em>about-us<\/em>, to render it in the <strong>FrontEnd<\/strong> you would just need to call the following function:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">echo Page::show('about-us');<\/code><\/pre>\r\n"},{"ord":"12","idDocumentation":"13","title":"Structure of a content object","titleUrl":"structure-of-a-content-object","idDocumentationCategory":"5","shortDescription":"This is a description of how the objects must be defined.","description":"<p>Every content object that you create on <strong>Asterion<\/strong> must have a <strong>XML<\/strong> structure attached to it. The <strong>XML<\/strong> format was chosen mainly because of its portability so it can be reusable in other <strong>CMS<\/strong> or programs. The basic structure of the file is as follows:<\/p>\r\n\r\n<pre>\r\n<code class=\"language-xml\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\r\n&lt;object&gt;\r\n    &lt;name&gt;SampleObject&lt;\/name&gt;\r\n    &lt;info&gt;\r\n        &lt;sql&gt;\r\n            &lt;primary&gt;idSampleObject&lt;\/primary&gt;\r\n            &lt;created&gt;true&lt;\/created&gt;\r\n            &lt;modified&gt;true&lt;\/modified&gt;\r\n            &lt;order&gt;true&lt;\/order&gt;\r\n            &lt;engine&gt;MyISAM&lt;\/engine&gt;\r\n            &lt;onDelete&gt;SampleObjectInstancesToDelete&lt;\/onDelete&gt;\r\n            &lt;onCreate&gt;SampleObjectToCreate&lt;\/onCreate&gt;\r\n        &lt;\/sql&gt;\r\n        &lt;form&gt;\r\n            &lt;title&gt;Title of the sample object&lt;\/title&gt;\r\n            &lt;label&gt;attributeName&lt;\/label&gt;\r\n            &lt;pager&gt;ammountOfRecordsPerPage&lt;\/pager&gt;\r\n            &lt;group&gt;multipleAttributeNameToGroup&lt;\/group&gt;\r\n            &lt;orderBy&gt;attributeNameToOrder&lt;\/orderBy&gt;\r\n            &lt;viewPublic&gt;true&lt;\/viewPublic&gt;\r\n            &lt;publicUrl&gt;@categories \/ #idCategory _ #nameUrl&lt;\/publicUrl&gt;\r\n            &lt;publicUrlList&gt;@categories&lt;\/publicUrlList&gt;\r\n            &lt;templateItemAdmin&gt;\r\n                &lt;p class=\"accent\"&gt;&lt;strong&gt;#name&lt;\/strong&gt;&lt;\/p&gt;\r\n                &lt;p class=\"tiny\"&gt;#shortDescription&lt;\/p&gt;\r\n            &lt;\/templateItemAdmin&gt;\r\n        &lt;\/form&gt;\r\n    &lt;\/info&gt;\r\n    &lt;attributes&gt;\r\n        &lt;attribute&gt;...&lt;\/attribute&gt;\r\n        &lt;attribute&gt;...&lt;\/attribute&gt;\r\n        &lt;attribute&gt;...&lt;\/attribute&gt;\r\n        &lt;attribute&gt;...&lt;\/attribute&gt;\r\n    &lt;\/attributes&gt;\r\n    &lt;indexes&gt;\r\n        &lt;index&gt;...&lt;\/index&gt;\r\n        &lt;index&gt;...&lt;\/index&gt;\r\n    &lt;\/indexes&gt;\r\n&lt;\/object&gt;<\/code><\/pre>\r\n\r\n<p>It is divided in the following elements:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>name<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the <strong>name<\/strong> of the object. This name is the same of the object, the files and the folder that contains them. It must be on camel case and without special characters or blank spaces.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>info<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the <strong>meta information<\/strong> of the objects.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>attributes<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the list of the <strong>attributes<\/strong> in an object. Every content object needs at least one attribute.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>indexes<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the list of the <strong>database indexes<\/strong> in the object, they are strictly related to the attributes.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>The info section is divided into:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td colspan=\"2\">\r\n\t\t\t<h4><strong><em>sql<\/em><\/strong><\/h4>\r\n\r\n\t\t\t<p>It is the meta information related to the database.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>primary<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the name of the <strong>primary<\/strong> attribute. It must be the name of the object preceded by id. For example if you have the <em>ProductCategory<\/em> object, the primary should be <em>idProductCategory<\/em>.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>created<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>true<\/em> \/ <em>false<\/em><br \/>\r\n\t\t\tIf it is set to true, the system will add a <em>created<\/em> date field in the table. When a record is inserted, the system will save the creation date.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>modified<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>true<\/em> \/ <em>false<\/em><br \/>\r\n\t\t\tIf it is set to true, the system will add a <em>modified<\/em> date field in the table. When a record is updated, the system will save the last modification date.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>order<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>true<\/em> \/ <em>false<\/em><br \/>\r\n\t\t\tIf it is set to true, the system will add an <em>ord<\/em> integer field in the table. The system will use this field to save the order of the record.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>engine<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>MyISAM<\/em> \/ <em>InnoDB<\/em><br \/>\r\n\t\t\tIt is the engine to use in the table. Both have advantages and limitations, by default is <em>MyISAM<\/em>.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>onDelete<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the comma-separated list of objects whose records must be deleted when a record in the main object is deleted. For example if a <em>User<\/em> is deleted, we can use this field to force the deletion of the <em>Post<\/em> records that the <em>User<\/em> wrote.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>onCreate<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the comma-separated list of objects that must be created when this object is created. It just works on the first time the object is created.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td colspan=\"2\">\r\n\t\t\t<h4><strong><em>form<\/em><\/strong><\/h4>\r\n\r\n\t\t\t<p>It is the meta information related to the creation of the automatic forms in the <strong>BackEnd<\/strong>.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>title<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the code of the title of the pages in the BackEnd to manage the object. This code will be automatically translated using the LangTrans object.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>label<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the attribute that will be used as a label to the object. It is optional since you can use the getBasicInfo() function.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>pager<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the amount of results to paginate in the BackEnd.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>group<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>In case of having multiple object attributes, such as categories, we can use this element to set an attribute and created groups of records.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>orderBy<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the attribute to order the records on the list. In case that the order property is set to true, this value must set to the ord attribute.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>viewPublic<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>true<\/em> \/ <em>false<\/em><br \/>\r\n\t\t\tIf it is set to <em>true<\/em>, we add a link to the public view of the object.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>publicUrl<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It creates the main URL for the object. For example if you have a Product object, it forms the URL of each one of the products. Elements are space-separated and you can use the symbols:<\/p>\r\n\r\n\t\t\t<ul>\r\n\t\t\t\t<li><em>@<\/em> for translations using the LangTrans object<\/li>\r\n\t\t\t\t<li><em>#<\/em> for rendered values of the attributes<\/li>\r\n\t\t\t<\/ul>\r\n\r\n\t\t\t<p>For example : <em>@products \/ #idProduct _ #nameUrl<\/em><br \/>\r\n\t\t\tRenders into: <em>http:\/\/localhost\/mystore\/es\/productos\/3_computadora-personal<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td><strong><em>publicUrlList<\/em><\/strong><\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It follows the same logic of the publicUrl except that is used for the URL of the main list.<\/p>\r\n\r\n\t\t\t<p>For example : <em>@products<\/em><br \/>\r\n\t\t\tRenders into: <em>http:\/\/localhost\/mystore\/es\/productos<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>templateItemAdmin<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is a mini template for the label of the records in the <strong>BackEnd<\/strong>. You can use plain HTML code, the following symbols are allowed:<\/p>\r\n\r\n\t\t\t<ul>\r\n\t\t\t\t<li><em>#<\/em> to render an attribute<\/li>\r\n\t\t\t\t<li><em>##<\/em> to have the exact value of an attribute<\/li>\r\n\t\t\t\t<li><em>_<\/em> to translate a term of the <em>LangTrans<\/em> object<\/li>\r\n\t\t\t<\/ul>\r\n\r\n\t\t\t<p>For example:<\/p>\r\n\r\n\t\t\t<pre>\r\n<code class=\"language-php\">&lt;div class=\"active active-##active\"&gt;\r\n  &lt;p class=\"image\"&gt;#image&lt;\/p&gt;\r\n  &lt;p class=\"accent\"&gt;&lt;strong&gt;#title&lt;\/strong&gt;&lt;\/p&gt;\r\n  &lt;p class=\"tiny\"&gt;&lt;em&gt;_code&lt;\/em&gt; : &lt;span class=\"mainAlt\"&gt;#code&lt;\/span&gt;&lt;\/p&gt;\r\n&lt;\/div&gt;<\/code><\/pre>\r\n\r\n\t\t\t<p>Would render to:<\/p>\r\n\r\n\t\t\t<pre>\r\n<code class=\"language-html\">&lt;div class=\"active active-1\"&gt;\r\n  &lt;p class=\"image\"&gt;&lt;img src=\"asterion_image.jpg\" alt=\"\"\/&gt;&lt;\/p&gt;\r\n  &lt;p class=\"accent\"&gt;&lt;strong&gt;My Asterion page&lt;\/strong&gt;&lt;\/p&gt;\r\n  &lt;p class=\"tiny\"&gt;&lt;em&gt;Codigo&lt;\/em&gt; : &lt;span class=\"mainAlt\"&gt;my-asterion-page&lt;\/span&gt;&lt;\/p&gt;\r\n&lt;\/div&gt;<\/code><\/pre>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>The attributes section has a list of attribute elements. These elements share the following common properties:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>name<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the <strong>name<\/strong> of the attribute. By convention we use lowercase.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>label<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the <strong>code<\/strong> of the label of the attribute. This code will be automatically translated using the <em>LangTrans<\/em> object.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>type<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the <strong>type<\/strong> of the attribute. <strong>Asterion<\/strong> has a set of pre-defined types but developers can add their own types.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>lang<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>true<\/em> \/ <em>false<\/em><br \/>\r\n\t\t\tIf it is set to <em>true<\/em>, the attribute is saved in the different languages with a prefix for each active language. It works only with the <em>text<\/em> or <em>textarea<\/em> types.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>required<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>notEmpty<\/em> \/ <em>email<\/em> \/ <em>password<\/em> \/ <em>unique<\/em><br \/>\r\n\t\t\tIt is the function that <strong>Asterion<\/strong> will use to validate the field when it is submitted. Developers can create their own required functions in the <em>Form<\/em> object.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<p>The list of the types for the attributes is:<\/p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td colspan=\"3\">\r\n\t\t\t<h4><strong><em>Identifiers<\/em><\/strong><\/h4>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>id-autoincrement<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>INT<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>Simple auto-incremented identifier for the object.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>id-char32<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>CHAR(32)<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is a random generated md5 identifier for the object.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>id-varchar<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>VARCHAR(255)<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is a user generated identifier for the object.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td colspan=\"3\">\r\n\t\t\t<h4><strong><em>Text fields<\/em><\/strong><\/h4>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>text<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>VARCHAR(255)<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is a simple input text.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>text-small<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>VARCHAR(255)<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is a small input text.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>text-large<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>VARCHAR(255)<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is a large input text.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>text-integer<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>INT<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is an input text used for numbers. It will parse any input as an integer in the database.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>text-double<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>DOUBLE<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is an input text used for decimal numbers. It will parse any input as a double in the database.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>text-postalcode<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>VARCHAR(255)<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is an input text used for postal codes.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>text-telephone<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>VARCHAR(255)<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is an input text used for telephones.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>text-email<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>VARCHAR(255)<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is an input text used for emails.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>text-unchangeable<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>VARCHAR(255)<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is an input text that cannot be modified.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>password<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>VARCHAR(255)<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is a password input.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td colspan=\"3\">\r\n\t\t\t<h4><strong><em>Hidden fields<\/em><\/strong><\/h4>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>hidden-url<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>VARCHAR(255)<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It creates an URL-friendly text using the information of a text field. The text field is defined in the <em>refAttribute<\/em> field. Usually it is used with <em>Post<\/em> titles or <em>Category<\/em> names.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>hidden-login<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>INT<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is used to save the identifier of the <em>User<\/em> that created the record.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>hidden-integer<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>INT<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is a simple hidden integer input. It is usually used to link ojects without loading them<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td colspan=\"3\">\r\n\t\t\t<h4><strong><em>Text areas<\/em><\/strong><\/h4>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>textarea<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>TEXT<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is a simple textarea field.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>textarea-small<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>TEXT<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is a small textarea field.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>textarea-large<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>TEXT<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is a large textarea field.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>textarea-ck<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>TEXT<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is a textarea field that will be displayed using the <strong>CKEditor<\/strong> to save <strong>HTML<\/strong> markup content.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td colspan=\"3\">\r\n\t\t\t<h4><strong><em>Select boxes<\/em><\/strong><\/h4>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>select<\/em><\/strong><br \/>\r\n\t\t\tSimple mode<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>INT<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It creates a simple select-box with values defined in the XML file. It needs the attribute values that contains all of the value elements:<\/p>\r\n\r\n\t\t\t<pre>\r\n<code class=\"language-xml\">&lt;values&gt;\r\n   &lt;value&gt;value1&lt;\/value&gt;\r\n   &lt;value&gt;value2&lt;\/value&gt;\r\n   &lt;value&gt;value3&lt;\/value&gt;\r\n&lt;\/values&gt;<\/code><\/pre>\r\n\r\n\t\t\t<p>In the database it stores the index of the value. In the example would store <em>0<\/em> for <em>value1<\/em>, <em>1<\/em> for <em>value2<\/em> and <em>2<\/em> for <em>value3<\/em>. The values are the codes that are automatically translated by the LangTrans object.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>select-checkbox<\/em><\/strong><br \/>\r\n\t\t\tSimple mode<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>INT<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the simple select-box with an additional checkbox that can set the value to <em>NULL<\/em>.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>select<\/em><\/strong><br \/>\r\n\t\t\tObject mode<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>INT<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It creates a select-box with values defined in another object. It needs the <em>refObject<\/em> element to link the parent object. The list of options in the select-box will be ordered using the order attribute in the parent object and the labels will come from the <em>getBasicInfoAdmin()<\/em> function.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>select-checkbox<\/em><\/strong> Object mode<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>INT<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It is the object select-box with an additional checkbox that can set the value to <em>NULL<\/em>.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td colspan=\"3\">\r\n\t\t\t<h4><strong><em>Dates<\/em><\/strong><\/h4>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>date<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>DATETIME<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It creates three select-boxes with the day, month and year to create a date. If it has the <em>checkboxDate<\/em> attribute set to true it also adds a checkbox to set the value to <em>NULL<\/em>.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>date-complete<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>DATETIME<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It adds two select-boxes with the hour and minutes to the simple date type.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>date-hour<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>DATETIME<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It creates two select-boxes with the hour and minutes to create a date.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>date-year<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>DATETIME<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It creates a simple select-box with the year to create a date.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>date-text<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>DATETIME<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It creates an input text that has a calendar attached to it to save a date.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td colspan=\"3\">\r\n\t\t\t<h4><strong><em>Checkbox and radio buttons<\/em><\/strong><\/h4>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>checkbox<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>INT<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It creates a simple checkbox. In the database it saves <u>1<\/u> or <u>0<\/u> according to the checked state.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>radio<\/em><\/strong><br \/>\r\n\t\t\tSimple mode<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>INT<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It creates a set of radio buttons with values defined in the XML file. It needs the attribute values that contains all of the value elements:<\/p>\r\n\r\n\t\t\t<pre>\r\n<code class=\"language-xml\">&lt;values&gt;\r\n   &lt;value&gt;value1&lt;\/value&gt;\r\n   &lt;value&gt;value2&lt;\/value&gt;\r\n   &lt;value&gt;value3&lt;\/value&gt;\r\n&lt;\/values&gt;<\/code><\/pre>\r\n\r\n\t\t\t<p>In the database it stores the index of the selected value. In the example would store <em>0<\/em> for <em>value1<\/em>, <em>1<\/em> for <em>value2<\/em> and <em>2<\/em> for <em>value3<\/em>. The values are the codes that are automatically translated by the <em>LangTrans<\/em> object.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>radio<\/em><\/strong><br \/>\r\n\t\t\tObject mode<\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>INT<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It creates a list of radio buttons with values defined in another object. It needs the <em>refObject<\/em> element to link the parent object. The list of radio buttons will be ordered using the order attribute in the parent object and the labels will come from the <em>getBasicInfoAdmin()<\/em> function.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td colspan=\"3\">\r\n\t\t\t<h4><strong><em>Files<\/em><\/strong><\/h4>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>file<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>VARCHAR(255)<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p>It creates an input file field. The system will save the file in the stock folder and save the name of the file in the database. In the case of an image it needs the following extra attribute:<\/p>\r\n\r\n\t\t\t<pre>\r\n<code class=\"language-xml\">&lt;mode&gt;image&lt;\/mode&gt;<\/code><\/pre>\r\n\r\n\t\t\t<p>To save the different versions of the image on the image stock folder.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td colspan=\"3\">\r\n\t\t\t<h4><strong><em>Multiple fields<\/em><\/strong><\/h4>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>multiple-object<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>-<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>1-n relation<\/em><br \/>\r\n\t\t\tIt creates a component to add, modify or delete children fields. It needs two arguments:<\/p>\r\n\r\n\t\t\t<ul>\r\n\t\t\t\t<li><em>refObject<\/em> which is the name of the child object.<\/li>\r\n\t\t\t\t<li><em>lnkAttribute<\/em> which is the name of the attribute in the child object that links the objects. Usually is the primary attribute. The information on the database is stored in the child objects.<\/li>\r\n\t\t\t<\/ul>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p><strong><em>multiple-checkbox<\/em><\/strong><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>-<\/em><\/p>\r\n\t\t\t<\/td>\r\n\t\t\t<td>\r\n\t\t\t<p><em>n-n relation<\/em><br \/>\r\n\t\t\tIt creates a checkbox list with all the records of the relation object. In this case we need an intermediate object that will save the keys of both relations. That&rsquo;s why this type needs two arguments:<\/p>\r\n\r\n\t\t\t<ul>\r\n\t\t\t\t<li><em>refObject<\/em> which is the name of the related object.<\/li>\r\n\t\t\t\t<li><em>lnkObject<\/em> which is the name of the link object.<\/li>\r\n\t\t\t<\/ul>\r\n\r\n\t\t\t<p>The information on the database is stored only on the linked object.<\/p>\r\n\t\t\t<\/td>\r\n\t\t<\/tr>\r\n\t<\/tbody>\r\n<\/table>\r\n"}]